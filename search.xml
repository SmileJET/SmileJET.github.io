<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>论文阅读</title>
    <url>/20200101l1/</url>
    <content><![CDATA[<h1 id="目标检测">目标检测</h1>
<h2 id="iccvgithubfcos-fully-convolutional-one-stage-object-detection">【2019 ICCV】<a href="https://github.com/tianzhi0549/FCOS" target="_blank" rel="external nofollow noopener noreferrer">【GitHub】</a>FCOS: Fully Convolutional One-Stage Object Detection</h2>
<p>以图像分割的方式解决目标检测问题。 <img src="/20200101l1/image-20200419231953985.png" alt="image-20200419231953985"></p>
<figure>
<img src="/20200101l1/image-20200420115251385.png" alt="image-20200420115251385"><figcaption>image-20200420115251385</figcaption>
</figure>
<figure>
<img src="/20200101l1/image-20200420115305609.png" alt="image-20200420115305609"><figcaption>image-20200420115305609</figcaption>
</figure>
<h1 id="图像分割">图像分割</h1>
<h2 id="cvprgithub-polarmask-single-shot-instance-segmentation-with-polar-representation">【2020 CVPR】<a href="https://github.com/xieenze/PolarMask" target="_blank" rel="external nofollow noopener noreferrer">【GitHub】</a> PolarMask: Single Shot Instance Segmentation with Polar Representation</h2>
<p>基于FCOS实现实例分割，使用极坐标表达实例的轮廓，进一步形成分割结果。</p>
<figure>
<img src="/20200101l1/image-20200420115345921.png" alt="image-20200420115345921"><figcaption>image-20200420115345921</figcaption>
</figure>
<figure>
<img src="/20200101l1/image-20200420115439081.png" alt="image-20200420115439081"><figcaption>image-20200420115439081</figcaption>
</figure>
<figure>
<img src="/20200101l1/image-20200420115451575.png" alt="image-20200420115451575"><figcaption>image-20200420115451575</figcaption>
</figure>
<h2 id="cvpr-centermask-single-shot-instance-segmentation-with-point-representation">【2020 CVPR】 CenterMask: single shot instance segmentation with point representation</h2>
<p>引入局部形状预测和全局显著性预测，分别预测每个物体的形状和全局下都有哪些物体，一个负责局部一个负责全局</p>
<figure>
<img src="/20200101l1/image-20200420115531014.png" alt="image-20200420115531014"><figcaption>image-20200420115531014</figcaption>
</figure>
<figure>
<img src="/20200101l1/image-20200420115548245.png" alt="image-20200420115548245"><figcaption>image-20200420115548245</figcaption>
</figure>
<figure>
<img src="/20200101l1/image-20200420115605745.png" alt="image-20200420115605745"><figcaption>image-20200420115605745</figcaption>
</figure>
<figure>
<img src="/20200101l1/image-20200420115615742.png" alt="image-20200420115615742"><figcaption>image-20200420115615742</figcaption>
</figure>
<h2 id="cvprgithub-strip-pooling-rethinking-spatial-pooling-for-scene-parsing">【2020 CVPR】<a href="https://github.com/Andrew-Qibin/SPNet" target="_blank" rel="external nofollow noopener noreferrer">【GitHub】</a> Strip Pooling: Rethinking Spatial Pooling for Scene Parsing</h2>
<p>提出条状Pooling，相比于方形卷积，可以较好检测到长条形物体</p>
<figure>
<img src="/20200101l1/image-20200420115653369.png" alt="image-20200420115653369"><figcaption>image-20200420115653369</figcaption>
</figure>
<figure>
<img src="/20200101l1/image-20200420115704116.png" alt="image-20200420115704116"><figcaption>image-20200420115704116</figcaption>
</figure>
<figure>
<img src="/20200101l1/image-20200420115715342.png" alt="image-20200420115715342"><figcaption>image-20200420115715342</figcaption>
</figure>
<figure>
<img src="/20200101l1/image-20200420115724747.png" alt="image-20200420115724747"><figcaption>image-20200420115724747</figcaption>
</figure>
<figure>
<img src="/20200101l1/image-20200420115733985.png" alt="image-20200420115733985"><figcaption>image-20200420115733985</figcaption>
</figure>
<h2 id="an-automatic-covid-19-ct-segmentation-based-on-u-net-with-attention-mechanism">【2020】An automatic COVID-19 CT segmentation based on U-Net with attention mechanism</h2>
<p>新型冠状病毒分割 在unet基础上做修改： - 加入注意力机制（通道+空间）</p>
<ul>
<li>focal tversky loss（检测小区域的病灶位置） <img src="/20200101l1/image-20200420115811144.png" alt="image-20200420115811144"></li>
</ul>
<p>Res_dil block（提高感受野）：</p>
<figure>
<img src="/20200101l1/image-20200420115853141.png" alt="image-20200420115853141"><figcaption>image-20200420115853141</figcaption>
</figure>
<p>注意力机制：</p>
<figure>
<img src="/20200101l1/image-20200420115917105.png" alt="image-20200420115917105"><figcaption>image-20200420115917105</figcaption>
</figure>
<figure>
<img src="/20200101l1/image-20200420115931445.png" alt="image-20200420115931445"><figcaption>image-20200420115931445</figcaption>
</figure>
<figure>
<img src="/20200101l1/image-20200420115946281.png" alt="image-20200420115946281"><figcaption>image-20200420115946281</figcaption>
</figure>
<h2 id="cvprgithub-dual-attention-network-for-scene-segmentation">【2019 CVPR】<a href="https://github.com/junfu1115/DANet/" target="_blank" rel="external nofollow noopener noreferrer">【GitHub】</a> Dual Attention Network for Scene Segmentation</h2>
<p>加入注意力机制，同时对空间和通道进行。</p>
<figure>
<img src="/20200101l1/image-20200420120019703.png" alt="image-20200420120019703"><figcaption>image-20200420120019703</figcaption>
</figure>
<figure>
<img src="/20200101l1/image-20200420120052772.png" alt="image-20200420120052772"><figcaption>image-20200420120052772</figcaption>
</figure>
<figure>
<img src="/20200101l1/image-20200420120101963.png" alt="image-20200420120101963"><figcaption>image-20200420120101963</figcaption>
</figure>
<h1 id="图像翻译">图像翻译</h1>
<h2 id="iclrgithubu-gat-it-unsupervised-generative-attentional-networks-with-adaptive-layer-instance-normalization-for-image-to-image-translation">【2020 ICLR】<a href="https://github.com/znxlwm/UGATIT-pytorch" target="_blank" rel="external nofollow noopener noreferrer">【GitHub】</a>U-GAT-IT: Unsupervised Generative Attentional Networks with Adaptive Layer-Instance Normalization for Image-to-Image Translation</h2>
<p><a href="http://www.twistedwg.com/2019/08/07/UGATIT.html" target="_blank" rel="external nofollow noopener noreferrer">UGATIT-自适应图层实例归一化下图像到图像转换</a> <a href="http://39.108.217.36/index.php/archives/392/" target="_blank" rel="external nofollow noopener noreferrer">论文笔记</a></p>
<p>引入<code>注意力机制</code>，这里采用全局和平均池化的类激活图（Class Activation Map-CAM）来实现的，通过CNN确定分类依据的位置。 加入<code>自适应图层实例归一化</code>（AdaLIN），帮助注意力引导模型灵活控制形状和纹理变化量。</p>
<p>CAM 的意义就是以热力图的形式告诉我们，模型通过哪些像素点得知图片属于某个类别。 特征图经过 GAP 处理后每一个特征图包含了不同类别的信息，权重 w 对应分类时的权重。绘制热力图时，提取出所有的权重，往回找到对应的特征图，然后进行加权求和即可。 <img src="/20200101l1/image-20200420120144704.png" alt="image-20200420120144704"></p>
<p>网络结构由一个生成器和两个判别器组成。 判别器的设计采用一个全局判别器(Global Discriminator)以及一个局部判别器(Local Discriminator)结合实现，所谓的全局判别器和局部判别器的区别就在于全局判别器对输入的图像进行了更深层次的特征压缩，最后输出的前一层。 <img src="/20200101l1/image-20200420120158234.png" alt="image-20200420120158234"> <img src="/20200101l1/image-20200420120213245.png" alt="image-20200420120213245"></p>
<p>此处要提一下，在判别器中也加入了CAM模块，虽然在判别器下CAM并没有做域的分类，但是加入注意力模块对于判别图像真伪是有益的，文中给出的解释是注意力图通过关注目标域中的真实图像和伪图像之间的差异来帮助进行微调。</p>
<p>损失函数： - GAN的对抗损失 - 循环一致性损失 - 身份损失（相同域之间不希望进行转换） - CAM损失（生成器中对图像域进行分类，希望源域和目标域尽可能分开）</p>
<figure>
<img src="/20200101l1/image-20200420120247952.png" alt="image-20200420120247952"><figcaption>image-20200420120247952</figcaption>
</figure>
<h1 id="backbone">Backbone</h1>
<h2 id="githubresnest-split-attention-networks">【2020】<a href="https://github.com/zhanghang1989/ResNeSt" target="_blank" rel="external nofollow noopener noreferrer">【GitHub】</a>ResNeSt: Split-Attention Networks</h2>
<p><img src="/20200101l1/image-20200424121613880-1587775087732.png"></p>
<p><img src="/20200101l1/image-20200424121729777.png"></p>
]]></content>
      <categories>
        <category>论文笔记</category>
      </categories>
      <tags>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式</title>
    <url>/20200426l2/</url>
    <content><![CDATA[<h1 id="简介">简介</h1>
<p>设计模式（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。</p>
<h2 id="类型">类型</h2>
<p>根据设计模式的参考书 <strong>Design Patterns - Elements of Reusable Object-Oriented Software（中文译名：设计模式 - 可复用的面向对象软件元素）</strong> 中所提到的，总共有 23 种设计模式。这些模式可以分为三大类：创建型模式（Creational Patterns）、结构型模式（Structural Patterns）、行为型模式（Behavioral Patterns）。</p>
<table>
<colgroup>
<col style="width: 3%">
<col style="width: 48%">
<col style="width: 48%">
</colgroup>
<thead>
<tr class="header">
<th>序号</th>
<th>模式 &amp; 描述</th>
<th>包括</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td><strong>创建型模式</strong><br>这些设计模式提供了一种在创建对象的同时隐藏创建逻辑的方式，而不是使用 new 运算符直接实例化对象。这使得程序在判断针对某个给定实例需要创建哪些对象时更加灵活。</td>
<td>- 工厂模式（Factory Pattern）<br> - 抽象工厂模式（Abstract Factory Pattern）<br>- 单例模式（Singleton Pattern） <br>- 建造者模式（Builder Pattern） <br>- 原型模式（Prototype Pattern）</td>
</tr>
<tr class="even">
<td>2</td>
<td><strong>结构型模式</strong><br>这些设计模式关注类和对象的组合。继承的概念被用来组合接口和定义组合对象获得新功能的方式。</td>
<td>适配器模式（Adapter Pattern）<br> -桥接模式（Bridge Pattern）<br> -过滤器模式（Filter、Criteria Pattern）<br> -组合模式（Composite Pattern）<br> -装饰器模式（Decorator Pattern）<br> -外观模式（Facade Pattern）<br> -享元模式（Flyweight Pattern）<br> -代理模式（Proxy Pattern）</td>
</tr>
<tr class="odd">
<td>3</td>
<td><strong>行为型模式</strong><br>这些设计模式特别关注对象之间的通信。</td>
<td>责任链模式（Chain of Responsibility Pattern）<br> -命令模式（Command Pattern） <br> -解释器模式（Interpreter Pattern） <br> -迭代器模式（Iterator Pattern） <br> -中介者模式（Mediator Pattern） <br> -备忘录模式（Memento Pattern） <br> -观察者模式（Observer Pattern） <br> -状态模式（State Pattern） <br> -空对象模式（Null Object Pattern）<br> - 策略模式（Strategy Pattern） <br> -模板模式（Template Pattern）<br> -访问者模式（Visitor Pattern）</td>
</tr>
</tbody>
</table>
<p><img src="/20200426l2/the-relationship-between-design-patterns.jpg"></p>
<h2 id="设计模式的六大原则">设计模式的六大原则</h2>
<p><strong>1、开闭原则（Open Close Principle）</strong></p>
<p>开闭原则的意思是：<strong>对扩展开放，对修改关闭</strong>。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。简言之，是为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类，后面的具体设计中我们会提到这点。</p>
<p><strong>2、里氏代换原则（Liskov Substitution Principle）</strong></p>
<p>里氏代换原则是面向对象设计的基本原则之一。 里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。LSP 是继承复用的基石，只有当派生类可以替换掉基类，且软件单位的功能不受到影响时，基类才能真正被复用，而派生类也能够在基类的基础上增加新的行为。里氏代换原则是对开闭原则的补充。实现开闭原则的关键步骤就是抽象化，而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。</p>
<p><strong>3、依赖倒转原则（Dependence Inversion Principle）</strong></p>
<p>这个原则是开闭原则的基础，具体内容：针对接口编程，依赖于抽象而不依赖于具体。</p>
<p><strong>4、接口隔离原则（Interface Segregation Principle）</strong></p>
<p>这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。它还有另外一个意思是：降低类之间的耦合度。由此可见，其实设计模式就是从大型软件架构出发、便于升级和维护的软件设计思想，它强调降低依赖，降低耦合。</p>
<p><strong>5、迪米特法则，又称最少知道原则（Demeter Principle）</strong></p>
<p>最少知道原则是指：一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立。</p>
<p><strong>6、合成复用原则（Composite Reuse Principle）</strong></p>
<p>合成复用原则是指：尽量使用合成/聚合的方式，而不是使用继承。</p>
<h1 id="工厂模式factory-pattern">工厂模式（Factory Pattern）</h1>
<h2 id="简介-1">简介</h2>
<p>工厂模式（Factory Pattern）是 Java 中最常用的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p>
<p>在工厂模式中，我们在创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象。</p>
<p><strong>意图：</strong>定义一个创建对象的接口，让其子类自己决定实例化哪一个工厂类，工厂模式使其创建过程延迟到子类进行。</p>
<p><strong>主要解决：</strong>主要解决接口选择的问题。</p>
<p><strong>何时使用：</strong>我们明确地计划不同条件下创建不同实例时。</p>
<p><strong>如何解决：</strong>让其子类实现工厂接口，返回的也是一个抽象的产品。</p>
<p><strong>关键代码：</strong>创建过程在其子类执行。</p>
<p><strong>应用实例：</strong> 1、您需要一辆汽车，可以直接从工厂里面提货，而不用去管这辆汽车是怎么做出来的，以及这个汽车里面的具体实现。 2、Hibernate 换数据库只需换方言和驱动就可以。</p>
<p><strong>优点：</strong> 1、一个调用者想创建一个对象，只要知道其名称就可以了。 2、扩展性高，如果想增加一个产品，只要扩展一个工厂类就可以。 3、屏蔽产品的具体实现，调用者只关心产品的接口。</p>
<p><strong>缺点：</strong>每次增加一个产品时，都需要增加一个具体类和对象实现工厂，使得系统中类的个数成倍增加，在一定程度上增加了系统的复杂度，同时也增加了系统具体类的依赖。这并不是什么好事。</p>
<p><strong>使用场景：</strong> 1、日志记录器：记录可能记录到本地硬盘、系统事件、远程服务器等，用户可以选择记录日志到什么地方。 2、数据库访问，当用户不知道最后系统采用哪一类数据库，以及数据库可能有变化时。 3、设计一个连接服务器的框架，需要三个协议，&quot;POP3&quot;、&quot;IMAP&quot;、&quot;HTTP&quot;，可以把这三个作为产品类，共同实现一个接口。</p>
<p><strong>注意事项：</strong>作为一种创建类模式，在任何需要生成复杂对象的地方，都可以使用工厂方法模式。有一点需要注意的地方就是复杂对象适合使用工厂模式，而简单对象，特别是只需要通过 new 就可以完成创建的对象，无需使用工厂模式。如果使用工厂模式，就需要引入一个工厂类，会增加系统的复杂度。</p>
<h2 id="实现">实现</h2>
<p>我们将创建一个 <em>Shape</em> 接口和实现 <em>Shape</em> 接口的实体类。下一步是定义工厂类 <em>ShapeFactory</em>。</p>
<p><em>FactoryPatternDemo</em>，我们的演示类使用 <em>ShapeFactory</em> 来获取 <em>Shape</em> 对象。它将向 <em>ShapeFactory</em> 传递信息（<em>CIRCLE / RECTANGLE / SQUARE</em>），以便获取它所需对象的类型。</p>
<p><img src="/20200426l2/factory_pattern_uml_diagram.jpg"></p>
<h1 id="抽象工厂模式abstract-factory-pattern">抽象工厂模式（Abstract Factory Pattern）</h1>
<h2 id="简介-2">简介</h2>
<p>抽象工厂模式（Abstract Factory Pattern）是围绕一个超级工厂创建其他工厂。该超级工厂又称为其他工厂的工厂。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p>
<p>在抽象工厂模式中，接口是负责创建一个相关对象的工厂，不需要显式指定它们的类。每个生成的工厂都能按照工厂模式提供对象。</p>
<p><strong>意图：</strong>提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。</p>
<p><strong>主要解决：</strong>主要解决接口选择的问题。</p>
<p><strong>何时使用：</strong>系统的产品有多于一个的产品族，而系统只消费其中某一族的产品。</p>
<p><strong>如何解决：</strong>在一个产品族里面，定义多个产品。</p>
<p><strong>关键代码：</strong>在一个工厂里聚合多个同类产品。</p>
<p><strong>应用实例：</strong>工作了，为了参加一些聚会，肯定有两套或多套衣服吧，比如说有商务装（成套，一系列具体产品）、时尚装（成套，一系列具体产品），甚至对于一个家庭来说，可能有商务女装、商务男装、时尚女装、时尚男装，这些也都是成套的，即一系列具体产品。假设一种情况（现实中是不存在的，要不然，没法进入共产主义了，但有利于说明抽象工厂模式），在您的家中，某一个衣柜（具体工厂）只能存放某一种这样的衣服（成套，一系列具体产品），每次拿这种成套的衣服时也自然要从这个衣柜中取出了。用 OOP 的思想去理解，所有的衣柜（具体工厂）都是衣柜类的（抽象工厂）某一个，而每一件成套的衣服又包括具体的上衣（某一具体产品），裤子（某一具体产品），这些具体的上衣其实也都是上衣（抽象产品），具体的裤子也都是裤子（另一个抽象产品）。</p>
<p><strong>优点：</strong>当一个产品族中的多个对象被设计成一起工作时，它能保证客户端始终只使用同一个产品族中的对象。</p>
<p><strong>缺点：</strong>产品族扩展非常困难，要增加一个系列的某一产品，既要在抽象的 Creator 里加代码，又要在具体的里面加代码。</p>
<p><strong>使用场景：</strong> 1、QQ 换皮肤，一整套一起换。 2、生成不同操作系统的程序。</p>
<p><strong>注意事项：</strong>产品族难扩展，产品等级易扩展。</p>
<h2 id="实现-1">实现</h2>
<p>我们将创建 <em>Shape</em> 和 <em>Color</em> 接口和实现这些接口的实体类。下一步是创建抽象工厂类 <em>AbstractFactory</em>。接着定义工厂类 <em>ShapeFactory</em> 和 <em>ColorFactory</em>，这两个工厂类都是扩展了 <em>AbstractFactory</em>。然后创建一个工厂创造器/生成器类 <em>FactoryProducer</em>。</p>
<p><em>AbstractFactoryPatternDemo</em>，我们的演示类使用 <em>FactoryProducer</em> 来获取 <em>AbstractFactory</em> 对象。它将向 <em>AbstractFactory</em> 传递形状信息 <em>Shape</em>（<em>CIRCLE / RECTANGLE / SQUARE</em>），以便获取它所需对象的类型。同时它还向 <em>AbstractFactory</em> 传递颜色信息 <em>Color</em>（<em>RED / GREEN / BLUE</em>），以便获取它所需对象的类型。</p>
<p><img src="/20200426l2/abstractfactory_pattern_uml_diagram.jpg"></p>
<h1 id="单例模式singleton-pattern">单例模式（Singleton Pattern）</h1>
<h1 id="简介-3">简介</h1>
<p>单例模式（Singleton Pattern）是 Java 中最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p>
<p>这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。</p>
<p><strong>注意：</strong></p>
<ul>
<li>1、单例类只能有一个实例。</li>
<li>2、单例类必须自己创建自己的唯一实例。</li>
<li>3、单例类必须给所有其他对象提供这一实例。</li>
</ul>
<p><strong>意图：</strong>保证一个类仅有一个实例，并提供一个访问它的全局访问点。</p>
<p><strong>主要解决：</strong>一个全局使用的类频繁地创建与销毁。</p>
<p><strong>何时使用：</strong>当您想控制实例数目，节省系统资源的时候。</p>
<p><strong>如何解决：</strong>判断系统是否已经有这个单例，如果有则返回，如果没有则创建。</p>
<p><strong>关键代码：</strong>构造函数是私有的。</p>
<p><strong>应用实例：</strong></p>
<ul>
<li>1、一个班级只有一个班主任。</li>
<li>2、Windows 是多进程多线程的，在操作一个文件的时候，就不可避免地出现多个进程或线程同时操作一个文件的现象，所以所有文件的处理必须通过唯一的实例来进行。</li>
<li>3、一些设备管理器常常设计为单例模式，比如一个电脑有两台打印机，在输出的时候就要处理不能两台打印机打印同一个文件。</li>
</ul>
<p><strong>优点：</strong></p>
<ul>
<li>1、在内存里只有一个实例，减少了内存的开销，尤其是频繁的创建和销毁实例（比如管理学院首页页面缓存）。</li>
<li>2、避免对资源的多重占用（比如写文件操作）。</li>
</ul>
<p><strong>缺点：</strong>没有接口，不能继承，与单一职责原则冲突，一个类应该只关心内部逻辑，而不关心外面怎么样来实例化。</p>
<p><strong>使用场景：</strong></p>
<ul>
<li>1、要求生产唯一序列号。</li>
<li>2、WEB 中的计数器，不用每次刷新都在数据库里加一次，用单例先缓存起来。</li>
<li>3、创建的一个对象需要消耗的资源过多，比如 I/O 与数据库的连接等。</li>
</ul>
<p><strong>注意事项：</strong>getInstance() 方法中需要使用同步锁 synchronized (Singleton.class) 防止多线程同时进入造成 instance 被多次实例化。</p>
<h2 id="实现-2">实现</h2>
<p>我们将创建一个 <em>SingleObject</em> 类。<em>SingleObject</em> 类有它的私有构造函数和本身的一个静态实例。</p>
<p><em>SingleObject</em> 类提供了一个静态方法，供外界获取它的静态实例。<em>SingletonPatternDemo</em>，我们的演示类使用 <em>SingleObject</em> 类来获取 <em>SingleObject</em> 对象。</p>
<p><img src="/20200426l2/singleton_pattern_uml_diagram.jpg"></p>
<h1 id="建造者模式builder-pattern">建造者模式（Builder Pattern）</h1>
<h2 id="简介-4">简介</h2>
<p>建造者模式（Builder Pattern）使用多个简单的对象一步一步构建成一个复杂的对象。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p>
<p>一个 Builder 类会一步一步构造最终的对象。该 Builder 类是独立于其他对象的。</p>
<p><strong>意图：</strong>将一个复杂的构建与其表示相分离，使得同样的构建过程可以创建不同的表示。</p>
<p><strong>主要解决：</strong>主要解决在软件系统中，有时候面临着&quot;一个复杂对象&quot;的创建工作，其通常由各个部分的子对象用一定的算法构成；由于需求的变化，这个复杂对象的各个部分经常面临着剧烈的变化，但是将它们组合在一起的算法却相对稳定。</p>
<p><strong>何时使用：</strong>一些基本部件不会变，而其组合经常变化的时候。</p>
<p><strong>如何解决：</strong>将变与不变分离开。</p>
<p><strong>关键代码：</strong>建造者：创建和提供实例，导演：管理建造出来的实例的依赖关系。</p>
<p><strong>应用实例：</strong> 1、去肯德基，汉堡、可乐、薯条、炸鸡翅等是不变的，而其组合是经常变化的，生成出所谓的&quot;套餐&quot;。 2、JAVA 中的 StringBuilder。</p>
<p><strong>优点：</strong> 1、建造者独立，易扩展。 2、便于控制细节风险。</p>
<p><strong>缺点：</strong> 1、产品必须有共同点，范围有限制。 2、如内部变化复杂，会有很多的建造类。</p>
<p><strong>使用场景：</strong> 1、需要生成的对象具有复杂的内部结构。 2、需要生成的对象内部属性本身相互依赖。</p>
<p><strong>注意事项：</strong>与工厂模式的区别是：建造者模式更加关注与零件装配的顺序。</p>
<h2 id="实现-3">实现</h2>
<p>我们假设一个快餐店的商业案例，其中，一个典型的套餐可以是一个汉堡（Burger）和一杯冷饮（Cold drink）。汉堡（Burger）可以是素食汉堡（Veg Burger）或鸡肉汉堡（Chicken Burger），它们是包在纸盒中。冷饮（Cold drink）可以是可口可乐（coke）或百事可乐（pepsi），它们是装在瓶子中。</p>
<p>我们将创建一个表示食物条目（比如汉堡和冷饮）的 <em>Item</em> 接口和实现 <em>Item</em> 接口的实体类，以及一个表示食物包装的 <em>Packing</em> 接口和实现 <em>Packing</em> 接口的实体类，汉堡是包在纸盒中，冷饮是装在瓶子中。</p>
<p>然后我们创建一个 <em>Meal</em> 类，带有 <em>Item</em> 的 <em>ArrayList</em> 和一个通过结合 <em>Item</em> 来创建不同类型的 <em>Meal</em> 对象的 <em>MealBuilder</em>。<em>BuilderPatternDemo</em>，我们的演示类使用 <em>MealBuilder</em> 来创建一个 <em>Meal</em>。</p>
<p><img src="/20200426l2/builder_pattern_uml_diagram.jpg"></p>
<h1 id="原型模式prototype-pattern">原型模式（Prototype Pattern）</h1>
<h2 id="简介-5">简介</h2>
<p>原型模式（Prototype Pattern）是用于创建重复的对象，同时又能保证性能。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p>
<p>这种模式是实现了一个原型接口，该接口用于创建当前对象的克隆。当直接创建对象的代价比较大时，则采用这种模式。例如，一个对象需要在一个高代价的数据库操作之后被创建。我们可以缓存该对象，在下一个请求时返回它的克隆，在需要的时候更新数据库，以此来减少数据库调用。</p>
<p><strong>意图：</strong>用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。</p>
<p><strong>主要解决：</strong>在运行期建立和删除原型。</p>
<p><strong>何时使用：</strong> 1、当一个系统应该独立于它的产品创建，构成和表示时。 2、当要实例化的类是在运行时刻指定时，例如，通过动态装载。 3、为了避免创建一个与产品类层次平行的工厂类层次时。 4、当一个类的实例只能有几个不同状态组合中的一种时。建立相应数目的原型并克隆它们可能比每次用合适的状态手工实例化该类更方便一些。</p>
<p><strong>如何解决：</strong>利用已有的一个原型对象，快速地生成和原型对象一样的实例。</p>
<p><strong>关键代码：</strong> 1、实现克隆操作，在 JAVA 继承 Cloneable，重写 clone()，在 .NET 中可以使用 Object 类的 MemberwiseClone() 方法来实现对象的浅拷贝或通过序列化的方式来实现深拷贝。 2、原型模式同样用于隔离类对象的使用者和具体类型（易变类）之间的耦合关系，它同样要求这些&quot;易变类&quot;拥有稳定的接口。</p>
<p><strong>应用实例：</strong> 1、细胞分裂。 2、JAVA 中的 Object clone() 方法。</p>
<p><strong>优点：</strong> 1、性能提高。 2、逃避构造函数的约束。</p>
<p><strong>缺点：</strong> 1、配备克隆方法需要对类的功能进行通盘考虑，这对于全新的类不是很难，但对于已有的类不一定很容易，特别当一个类引用不支持串行化的间接对象，或者引用含有循环结构的时候。 2、必须实现 Cloneable 接口。</p>
<p><strong>使用场景：</strong> 1、资源优化场景。 2、类初始化需要消化非常多的资源，这个资源包括数据、硬件资源等。 3、性能和安全要求的场景。 4、通过 new 产生一个对象需要非常繁琐的数据准备或访问权限，则可以使用原型模式。 5、一个对象多个修改者的场景。 6、一个对象需要提供给其他对象访问，而且各个调用者可能都需要修改其值时，可以考虑使用原型模式拷贝多个对象供调用者使用。 7、在实际项目中，原型模式很少单独出现，一般是和工厂方法模式一起出现，通过 clone 的方法创建一个对象，然后由工厂方法提供给调用者。原型模式已经与 Java 融为浑然一体，大家可以随手拿来使用。</p>
<p><strong>注意事项：</strong>与通过对一个类进行实例化来构造新对象不同的是，原型模式是通过拷贝一个现有对象生成新对象的。浅拷贝实现 Cloneable，重写，深拷贝是通过实现 Serializable 读取二进制流。</p>
<h2 id="实现-4">实现</h2>
<p>我们将创建一个抽象类 <em>Shape</em> 和扩展了 <em>Shape</em> 类的实体类。下一步是定义类 <em>ShapeCache</em>，该类把 shape 对象存储在一个 <em>Hashtable</em> 中，并在请求的时候返回它们的克隆。</p>
<p><em>PrototypePatternDemo</em>，我们的演示类使用 <em>ShapeCache</em> 类来获取 <em>Shape</em> 对象。</p>
<p><img src="/20200426l2/prototype_pattern_uml_diagram.jpg"></p>
<h1 id="适配器模式adapter-pattern">适配器模式（Adapter Pattern）</h1>
<h2 id="简介-6">简介</h2>
<p>适配器模式（Adapter Pattern）是作为两个不兼容的接口之间的桥梁。这种类型的设计模式属于结构型模式，它结合了两个独立接口的功能。</p>
<p>这种模式涉及到一个单一的类，该类负责加入独立的或不兼容的接口功能。举个真实的例子，读卡器是作为内存卡和笔记本之间的适配器。您将内存卡插入读卡器，再将读卡器插入笔记本，这样就可以通过笔记本来读取内存卡。</p>
<p>我们通过下面的实例来演示适配器模式的使用。其中，音频播放器设备只能播放 mp3 文件，通过使用一个更高级的音频播放器来播放 vlc 和 mp4 文件。</p>
<p><strong>意图：</strong>将一个类的接口转换成客户希望的另外一个接口。适配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。</p>
<p><strong>主要解决：</strong>主要解决在软件系统中，常常要将一些&quot;现存的对象&quot;放到新的环境中，而新环境要求的接口是现对象不能满足的。</p>
<p><strong>何时使用：</strong> 1、系统需要使用现有的类，而此类的接口不符合系统的需要。 2、想要建立一个可以重复使用的类，用于与一些彼此之间没有太大关联的一些类，包括一些可能在将来引进的类一起工作，这些源类不一定有一致的接口。 3、通过接口转换，将一个类插入另一个类系中。（比如老虎和飞禽，现在多了一个飞虎，在不增加实体的需求下，增加一个适配器，在里面包容一个虎对象，实现飞的接口。）</p>
<p><strong>如何解决：</strong>继承或依赖（推荐）。</p>
<p><strong>关键代码：</strong>适配器继承或依赖已有的对象，实现想要的目标接口。</p>
<p><strong>应用实例：</strong> 1、美国电器 110V，中国 220V，就要有一个适配器将 110V 转化为 220V。 2、JAVA JDK 1.1 提供了 Enumeration 接口，而在 1.2 中提供了 Iterator 接口，想要使用 1.2 的 JDK，则要将以前系统的 Enumeration 接口转化为 Iterator 接口，这时就需要适配器模式。 3、在 LINUX 上运行 WINDOWS 程序。 4、JAVA 中的 jdbc。</p>
<p><strong>优点：</strong> 1、可以让任何两个没有关联的类一起运行。 2、提高了类的复用。 3、增加了类的透明度。 4、灵活性好。</p>
<p><strong>缺点：</strong> 1、过多地使用适配器，会让系统非常零乱，不易整体进行把握。比如，明明看到调用的是 A 接口，其实内部被适配成了 B 接口的实现，一个系统如果太多出现这种情况，无异于一场灾难。因此如果不是很有必要，可以不使用适配器，而是直接对系统进行重构。 2.由于 JAVA 至多继承一个类，所以至多只能适配一个适配者类，而且目标类必须是抽象类。</p>
<p><strong>使用场景：</strong>有动机地修改一个正常运行的系统的接口，这时应该考虑使用适配器模式。</p>
<p><strong>注意事项：</strong>适配器不是在详细设计时添加的，而是解决正在服役的项目的问题。</p>
<h2 id="实现-5">实现</h2>
<p>我们有一个 <em>MediaPlayer</em> 接口和一个实现了 <em>MediaPlayer</em> 接口的实体类 <em>AudioPlayer</em>。默认情况下，<em>AudioPlayer</em> 可以播放 mp3 格式的音频文件。</p>
<p>我们还有另一个接口 <em>AdvancedMediaPlayer</em> 和实现了 <em>AdvancedMediaPlayer</em> 接口的实体类。该类可以播放 vlc 和 mp4 格式的文件。</p>
<p>我们想要让 <em>AudioPlayer</em> 播放其他格式的音频文件。为了实现这个功能，我们需要创建一个实现了 <em>MediaPlayer</em> 接口的适配器类 <em>MediaAdapter</em>，并使用 <em>AdvancedMediaPlayer</em> 对象来播放所需的格式。</p>
<p><em>AudioPlayer</em> 使用适配器类 <em>MediaAdapter</em> 传递所需的音频类型，不需要知道能播放所需格式音频的实际类。<em>AdapterPatternDemo</em>，我们的演示类使用 <em>AudioPlayer</em> 类来播放各种格式。</p>
<p><img src="/20200426l2/adapter_pattern_uml_diagram.jpg"></p>
<h1 id="桥接模式bridge-pattern">桥接模式（Bridge Pattern）</h1>
<h2 id="简介-7">简介</h2>
<p>桥接（Bridge）是用于把抽象化与实现化解耦，使得二者可以独立变化。这种类型的设计模式属于结构型模式，它通过提供抽象化和实现化之间的桥接结构，来实现二者的解耦。</p>
<p>这种模式涉及到一个作为桥接的接口，使得实体类的功能独立于接口实现类。这两种类型的类可被结构化改变而互不影响。</p>
<p>我们通过下面的实例来演示桥接模式（Bridge Pattern）的用法。其中，可以使用相同的抽象类方法但是不同的桥接实现类，来画出不同颜色的圆。</p>
<p><strong>意图：</strong>将抽象部分与实现部分分离，使它们都可以独立的变化。</p>
<p><strong>主要解决：</strong>在有多种可能会变化的情况下，用继承会造成类爆炸问题，扩展起来不灵活。</p>
<p><strong>何时使用：</strong>实现系统可能有多个角度分类，每一种角度都可能变化。</p>
<p><strong>如何解决：</strong>把这种多角度分类分离出来，让它们独立变化，减少它们之间耦合。</p>
<p><strong>关键代码：</strong>抽象类依赖实现类。</p>
<p><strong>应用实例：</strong> 1、猪八戒从天蓬元帅转世投胎到猪，转世投胎的机制将尘世划分为两个等级，即：灵魂和肉体，前者相当于抽象化，后者相当于实现化。生灵通过功能的委派，调用肉体对象的功能，使得生灵可以动态地选择。 2、墙上的开关，可以看到的开关是抽象的，不用管里面具体怎么实现的。</p>
<p><strong>优点：</strong> 1、抽象和实现的分离。 2、优秀的扩展能力。 3、实现细节对客户透明。</p>
<p><strong>缺点：</strong>桥接模式的引入会增加系统的理解与设计难度，由于聚合关联关系建立在抽象层，要求开发者针对抽象进行设计与编程。</p>
<p><strong>使用场景：</strong> 1、如果一个系统需要在构件的抽象化角色和具体化角色之间增加更多的灵活性，避免在两个层次之间建立静态的继承联系，通过桥接模式可以使它们在抽象层建立一个关联关系。 2、对于那些不希望使用继承或因为多层次继承导致系统类的个数急剧增加的系统，桥接模式尤为适用。 3、一个类存在两个独立变化的维度，且这两个维度都需要进行扩展。</p>
<p><strong>注意事项：</strong>对于两个独立变化的维度，使用桥接模式再适合不过了。</p>
<h2 id="实现-6">实现</h2>
<p>我们有一个作为桥接实现的 <em>DrawAPI</em> 接口和实现了 <em>DrawAPI</em> 接口的实体类 <em>RedCircle</em>、<em>GreenCircle</em>。<em>Shape</em> 是一个抽象类，将使用 <em>DrawAPI</em> 的对象。<em>BridgePatternDemo</em>，我们的演示类使用 <em>Shape</em> 类来画出不同颜色的圆。</p>
<p><img src="/20200426l2/bridge_pattern_uml_diagram.jpg"></p>
<h1 id="过滤器模式filtercriteria-pattern">过滤器模式（Filter、Criteria Pattern）</h1>
<h2 id="简介-8">简介</h2>
<p>过滤器模式（Filter Pattern）或标准模式（Criteria Pattern）是一种设计模式，这种模式允许开发人员使用不同的标准来过滤一组对象，通过逻辑运算以解耦的方式把它们连接起来。这种类型的设计模式属于结构型模式，它结合多个标准来获得单一标准。</p>
<h2 id="实现-7">实现</h2>
<p>我们将创建一个 <em>Person</em> 对象、<em>Criteria</em> 接口和实现了该接口的实体类，来过滤 <em>Person</em> 对象的列表。<em>CriteriaPatternDemo</em>，我们的演示类使用 <em>Criteria</em> 对象，基于各种标准和它们的结合来过滤 <em>Person</em> 对象的列表。</p>
<p><img src="/20200426l2/filter_pattern_uml_diagram.jpg"></p>
<h1 id="组合模式composite-pattern">组合模式（Composite Pattern）</h1>
<h2 id="简介-9">简介</h2>
<p>组合模式（Composite Pattern），又叫部分整体模式，是用于把一组相似的对象当作一个单一的对象。组合模式依据树形结构来组合对象，用来表示部分以及整体层次。这种类型的设计模式属于结构型模式，它创建了对象组的树形结构。</p>
<p>这种模式创建了一个包含自己对象组的类。该类提供了修改相同对象组的方式。</p>
<p>我们通过下面的实例来演示组合模式的用法。实例演示了一个组织中员工的层次结构。</p>
<p><strong>意图：</strong>将对象组合成树形结构以表示&quot;部分-整体&quot;的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。</p>
<p><strong>主要解决：</strong>它在我们树型结构的问题中，模糊了简单元素和复杂元素的概念，客户程序可以像处理简单元素一样来处理复杂元素，从而使得客户程序与复杂元素的内部结构解耦。</p>
<p><strong>何时使用：</strong> 1、您想表示对象的部分-整体层次结构（树形结构）。 2、您希望用户忽略组合对象与单个对象的不同，用户将统一地使用组合结构中的所有对象。</p>
<p><strong>如何解决：</strong>树枝和叶子实现统一接口，树枝内部组合该接口。</p>
<p><strong>关键代码：</strong>树枝内部组合该接口，并且含有内部属性 List，里面放 Component。</p>
<p><strong>应用实例：</strong> 1、算术表达式包括操作数、操作符和另一个操作数，其中，另一个操作符也可以是操作数、操作符和另一个操作数。 2、在 JAVA AWT 和 SWING 中，对于 Button 和 Checkbox 是树叶，Container 是树枝。</p>
<p><strong>优点：</strong> 1、高层模块调用简单。 2、节点自由增加。</p>
<p><strong>缺点：</strong>在使用组合模式时，其叶子和树枝的声明都是实现类，而不是接口，违反了依赖倒置原则。</p>
<p><strong>使用场景：</strong>部分、整体场景，如树形菜单，文件、文件夹的管理。</p>
<p><strong>注意事项：</strong>定义时为具体类。</p>
<h2 id="实现-8">实现</h2>
<p>我们有一个类 <em>Employee</em>，该类被当作组合模型类。<em>CompositePatternDemo</em>，我们的演示类使用 <em>Employee</em> 类来添加部门层次结构，并打印所有员工。</p>
<p><img src="/20200426l2/composite_pattern_uml_diagram.jpg"></p>
<h1 id="装饰器模式decorator-pattern">装饰器模式（Decorator Pattern）</h1>
<h2 id="简介-10">简介</h2>
<p>装饰器模式（Decorator Pattern）允许向一个现有的对象添加新的功能，同时又不改变其结构。这种类型的设计模式属于结构型模式，它是作为现有的类的一个包装。</p>
<p>这种模式创建了一个装饰类，用来包装原有的类，并在保持类方法签名完整性的前提下，提供了额外的功能。</p>
<p>我们通过下面的实例来演示装饰器模式的用法。其中，我们将把一个形状装饰上不同的颜色，同时又不改变形状类。</p>
<p><strong>意图：</strong>动态地给一个对象添加一些额外的职责。就增加功能来说，装饰器模式相比生成子类更为灵活。</p>
<p><strong>主要解决：</strong>一般的，我们为了扩展一个类经常使用继承方式实现，由于继承为类引入静态特征，并且随着扩展功能的增多，子类会很膨胀。</p>
<p><strong>何时使用：</strong>在不想增加很多子类的情况下扩展类。</p>
<p><strong>如何解决：</strong>将具体功能职责划分，同时继承装饰者模式。</p>
<p><strong>关键代码：</strong> 1、Component 类充当抽象角色，不应该具体实现。 2、修饰类引用和继承 Component 类，具体扩展类重写父类方法。</p>
<p><strong>应用实例：</strong> 1、孙悟空有 72 变，当他变成&quot;庙宇&quot;后，他的根本还是一只猴子，但是他又有了庙宇的功能。 2、不论一幅画有没有画框都可以挂在墙上，但是通常都是有画框的，并且实际上是画框被挂在墙上。在挂在墙上之前，画可以被蒙上玻璃，装到框子里；这时画、玻璃和画框形成了一个物体。</p>
<p><strong>优点：</strong>装饰类和被装饰类可以独立发展，不会相互耦合，装饰模式是继承的一个替代模式，装饰模式可以动态扩展一个实现类的功能。</p>
<p><strong>缺点：</strong>多层装饰比较复杂。</p>
<p><strong>使用场景：</strong> 1、扩展一个类的功能。 2、动态增加功能，动态撤销。</p>
<p><strong>注意事项：</strong>可代替继承。</p>
<h2 id="实现-9">实现</h2>
<p>我们将创建一个 <em>Shape</em> 接口和实现了 <em>Shape</em> 接口的实体类。然后我们创建一个实现了 <em>Shape</em> 接口的抽象装饰类 <em>ShapeDecorator</em>，并把 <em>Shape</em> 对象作为它的实例变量。</p>
<p><em>RedShapeDecorator</em> 是实现了 <em>ShapeDecorator</em> 的实体类。</p>
<p><em>DecoratorPatternDemo</em>，我们的演示类使用 <em>RedShapeDecorator</em> 来装饰 <em>Shape</em> 对象。</p>
<p><img src="/20200426l2/decorator_pattern_uml_diagram.jpg"></p>
<h1 id="外观模式facade-pattern">外观模式（Facade Pattern）</h1>
<h2 id="简介-11">简介</h2>
<p>外观模式（Facade Pattern）隐藏系统的复杂性，并向客户端提供了一个客户端可以访问系统的接口。这种类型的设计模式属于结构型模式，它向现有的系统添加一个接口，来隐藏系统的复杂性。</p>
<p>这种模式涉及到一个单一的类，该类提供了客户端请求的简化方法和对现有系统类方法的委托调用。</p>
<p><strong>意图：</strong>为子系统中的一组接口提供一个一致的界面，外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。</p>
<p><strong>主要解决：</strong>降低访问复杂系统的内部子系统时的复杂度，简化客户端与之的接口。</p>
<p><strong>何时使用：</strong> 1、客户端不需要知道系统内部的复杂联系，整个系统只需提供一个&quot;接待员&quot;即可。 2、定义系统的入口。</p>
<p><strong>如何解决：</strong>客户端不与系统耦合，外观类与系统耦合。</p>
<p><strong>关键代码：</strong>在客户端和复杂系统之间再加一层，这一层将调用顺序、依赖关系等处理好。</p>
<p><strong>应用实例：</strong> 1、去医院看病，可能要去挂号、门诊、划价、取药，让患者或患者家属觉得很复杂，如果有提供接待人员，只让接待人员来处理，就很方便。 2、JAVA 的三层开发模式。</p>
<p><strong>优点：</strong> 1、减少系统相互依赖。 2、提高灵活性。 3、提高了安全性。</p>
<p><strong>缺点：</strong>不符合开闭原则，如果要改东西很麻烦，继承重写都不合适。</p>
<p><strong>使用场景：</strong> 1、为复杂的模块或子系统提供外界访问的模块。 2、子系统相对独立。 3、预防低水平人员带来的风险。</p>
<p><strong>注意事项：</strong>在层次化结构中，可以使用外观模式定义系统中每一层的入口。</p>
<h2 id="实现-10">实现</h2>
<p>我们将创建一个 <em>Shape</em> 接口和实现了 <em>Shape</em> 接口的实体类。下一步是定义一个外观类 <em>ShapeMaker</em>。</p>
<p><em>ShapeMaker</em> 类使用实体类来代表用户对这些类的调用。<em>FacadePatternDemo</em>，我们的演示类使用 <em>ShapeMaker</em> 类来显示结果。</p>
<p><img src="/20200426l2/facade_pattern_uml_diagram.jpg"></p>
<h1 id="享元模式flyweight-pattern">享元模式（Flyweight Pattern）</h1>
<h2 id="简介-12">简介</h2>
<p>享元模式（Flyweight Pattern）主要用于减少创建对象的数量，以减少内存占用和提高性能。这种类型的设计模式属于结构型模式，它提供了减少对象数量从而改善应用所需的对象结构的方式。</p>
<p>享元模式尝试重用现有的同类对象，如果未找到匹配的对象，则创建新对象。我们将通过创建 5 个对象来画出 20 个分布于不同位置的圆来演示这种模式。由于只有 5 种可用的颜色，所以 color 属性被用来检查现有的 <em>Circle</em> 对象。</p>
<p><strong>意图：</strong>运用共享技术有效地支持大量细粒度的对象。</p>
<p><strong>主要解决：</strong>在有大量对象时，有可能会造成内存溢出，我们把其中共同的部分抽象出来，如果有相同的业务请求，直接返回在内存中已有的对象，避免重新创建。</p>
<p><strong>何时使用：</strong> 1、系统中有大量对象。 2、这些对象消耗大量内存。 3、这些对象的状态大部分可以外部化。 4、这些对象可以按照内蕴状态分为很多组，当把外蕴对象从对象中剔除出来时，每一组对象都可以用一个对象来代替。 5、系统不依赖于这些对象身份，这些对象是不可分辨的。</p>
<p><strong>如何解决：</strong>用唯一标识码判断，如果在内存中有，则返回这个唯一标识码所标识的对象。</p>
<p><strong>关键代码：</strong>用 HashMap 存储这些对象。</p>
<p><strong>应用实例：</strong> 1、JAVA 中的 String，如果有则返回，如果没有则创建一个字符串保存在字符串缓存池里面。 2、数据库的数据池。</p>
<p><strong>优点：</strong>大大减少对象的创建，降低系统的内存，使效率提高。</p>
<p><strong>缺点：</strong>提高了系统的复杂度，需要分离出外部状态和内部状态，而且外部状态具有固有化的性质，不应该随着内部状态的变化而变化，否则会造成系统的混乱。</p>
<p><strong>使用场景：</strong> 1、系统有大量相似对象。 2、需要缓冲池的场景。</p>
<p><strong>注意事项：</strong> 1、注意划分外部状态和内部状态，否则可能会引起线程安全问题。 2、这些类必须有一个工厂对象加以控制。</p>
<h2 id="实现-11">实现</h2>
<p>我们将创建一个 <em>Shape</em> 接口和实现了 <em>Shape</em> 接口的实体类 <em>Circle</em>。下一步是定义工厂类 <em>ShapeFactory</em>。</p>
<p><em>ShapeFactory</em> 有一个 <em>Circle</em> 的 <em>HashMap</em>，其中键名为 <em>Circle</em> 对象的颜色。无论何时接收到请求，都会创建一个特定颜色的圆。<em>ShapeFactory</em> 检查它的 <em>HashMap</em> 中的 circle 对象，如果找到 <em>Circle</em> 对象，则返回该对象，否则将创建一个存储在 hashmap 中以备后续使用的新对象，并把该对象返回到客户端。</p>
<p><em>FlyWeightPatternDemo</em>，我们的演示类使用 <em>ShapeFactory</em> 来获取 <em>Shape</em> 对象。它将向 <em>ShapeFactory</em> 传递信息（<em>red / green / blue/ black / white</em>），以便获取它所需对象的颜色。</p>
<p><img src="/20200426l2/flyweight_pattern_uml_diagram-1.jpg"></p>
<h1 id="代理模式proxy-pattern">代理模式（Proxy Pattern）</h1>
<h2 id="简介-13">简介</h2>
<p>在代理模式（Proxy Pattern）中，一个类代表另一个类的功能。这种类型的设计模式属于结构型模式。</p>
<p>在代理模式中，我们创建具有现有对象的对象，以便向外界提供功能接口。</p>
<p><strong>意图：</strong>为其他对象提供一种代理以控制对这个对象的访问。</p>
<p><strong>主要解决：</strong>在直接访问对象时带来的问题，比如说：要访问的对象在远程的机器上。在面向对象系统中，有些对象由于某些原因（比如对象创建开销很大，或者某些操作需要安全控制，或者需要进程外的访问），直接访问会给使用者或者系统结构带来很多麻烦，我们可以在访问此对象时加上一个对此对象的访问层。</p>
<p><strong>何时使用：</strong>想在访问一个类时做一些控制。</p>
<p><strong>如何解决：</strong>增加中间层。</p>
<p><strong>关键代码：</strong>实现与被代理类组合。</p>
<p><strong>应用实例：</strong> 1、Windows 里面的快捷方式。 2、猪八戒去找高翠兰结果是孙悟空变的，可以这样理解：把高翠兰的外貌抽象出来，高翠兰本人和孙悟空都实现了这个接口，猪八戒访问高翠兰的时候看不出来这个是孙悟空，所以说孙悟空是高翠兰代理类。 3、买火车票不一定在火车站买，也可以去代售点。 4、一张支票或银行存单是账户中资金的代理。支票在市场交易中用来代替现金，并提供对签发人账号上资金的控制。 5、spring aop。</p>
<p><strong>优点：</strong> 1、职责清晰。 2、高扩展性。 3、智能化。</p>
<p><strong>缺点：</strong> 1、由于在客户端和真实主题之间增加了代理对象，因此有些类型的代理模式可能会造成请求的处理速度变慢。 2、实现代理模式需要额外的工作，有些代理模式的实现非常复杂。</p>
<p><strong>使用场景：</strong>按职责来划分，通常有以下使用场景： 1、远程代理。 2、虚拟代理。 3、Copy-on-Write 代理。 4、保护（Protect or Access）代理。 5、Cache代理。 6、防火墙（Firewall）代理。 7、同步化（Synchronization）代理。 8、智能引用（Smart Reference）代理。</p>
<p><strong>注意事项：</strong> 1、和适配器模式的区别：适配器模式主要改变所考虑对象的接口，而代理模式不能改变所代理类的接口。 2、和装饰器模式的区别：装饰器模式为了增强功能，而代理模式是为了加以控制。</p>
<h2 id="实现-12">实现</h2>
<p>我们将创建一个 <em>Image</em> 接口和实现了 <em>Image</em> 接口的实体类。<em>ProxyImage</em> 是一个代理类，减少 <em>RealImage</em> 对象加载的内存占用。</p>
<p><em>ProxyPatternDemo</em>，我们的演示类使用 <em>ProxyImage</em> 来获取要加载的 <em>Image</em> 对象，并按照需求进行显示。</p>
<p><img src="/20200426l2/proxy_pattern_uml_diagram.jpg"></p>
<h1 id="责任链模式chain-of-responsibility-pattern">责任链模式（Chain of Responsibility Pattern）</h1>
<h2 id="简介-14">简介</h2>
<p>顾名思义，责任链模式（Chain of Responsibility Pattern）为请求创建了一个接收者对象的链。这种模式给予请求的类型，对请求的发送者和接收者进行解耦。这种类型的设计模式属于行为型模式。</p>
<p>在这种模式中，通常每个接收者都包含对另一个接收者的引用。如果一个对象不能处理该请求，那么它会把相同的请求传给下一个接收者，依此类推。</p>
<p><strong>意图：</strong>避免请求发送者与接收者耦合在一起，让多个对象都有可能接收请求，将这些对象连接成一条链，并且沿着这条链传递请求，直到有对象处理它为止。</p>
<p><strong>主要解决：</strong>职责链上的处理者负责处理请求，客户只需要将请求发送到职责链上即可，无须关心请求的处理细节和请求的传递，所以职责链将请求的发送者和请求的处理者解耦了。</p>
<p><strong>何时使用：</strong>在处理消息的时候以过滤很多道。</p>
<p><strong>如何解决：</strong>拦截的类都实现统一接口。</p>
<p><strong>关键代码：</strong>Handler 里面聚合它自己，在 HandlerRequest 里判断是否合适，如果没达到条件则向下传递，向谁传递之前 set 进去。</p>
<p><strong>应用实例：</strong> 1、红楼梦中的&quot;击鼓传花&quot;。 2、JS 中的事件冒泡。 3、JAVA WEB 中 Apache Tomcat 对 Encoding 的处理，Struts2 的拦截器，jsp servlet 的 Filter。</p>
<p><strong>优点：</strong> 1、降低耦合度。它将请求的发送者和接收者解耦。 2、简化了对象。使得对象不需要知道链的结构。 3、增强给对象指派职责的灵活性。通过改变链内的成员或者调动它们的次序，允许动态地新增或者删除责任。 4、增加新的请求处理类很方便。</p>
<p><strong>缺点：</strong> 1、不能保证请求一定被接收。 2、系统性能将受到一定影响，而且在进行代码调试时不太方便，可能会造成循环调用。 3、可能不容易观察运行时的特征，有碍于除错。</p>
<p><strong>使用场景：</strong> 1、有多个对象可以处理同一个请求，具体哪个对象处理该请求由运行时刻自动确定。 2、在不明确指定接收者的情况下，向多个对象中的一个提交一个请求。 3、可动态指定一组对象处理请求。</p>
<p><strong>注意事项：</strong>在 JAVA WEB 中遇到很多应用。</p>
<h2 id="实现-13">实现</h2>
<p>我们创建抽象类 <em>AbstractLogger</em>，带有详细的日志记录级别。然后我们创建三种类型的记录器，都扩展了 <em>AbstractLogger</em>。每个记录器消息的级别是否属于自己的级别，如果是则相应地打印出来，否则将不打印并把消息传给下一个记录器。</p>
<p><img src="/20200426l2/chain_pattern_uml_diagram.jpg"></p>
<h1 id="命令模式command-pattern">命令模式（Command Pattern）</h1>
<h2 id="简介-15">简介</h2>
<p>命令模式（Command Pattern）是一种数据驱动的设计模式，它属于行为型模式。请求以命令的形式包裹在对象中，并传给调用对象。调用对象寻找可以处理该命令的合适的对象，并把该命令传给相应的对象，该对象执行命令。</p>
<p><strong>意图：</strong>将一个请求封装成一个对象，从而使您可以用不同的请求对客户进行参数化。</p>
<p><strong>主要解决：</strong>在软件系统中，行为请求者与行为实现者通常是一种紧耦合的关系，但某些场合，比如需要对行为进行记录、撤销或重做、事务等处理时，这种无法抵御变化的紧耦合的设计就不太合适。</p>
<p><strong>何时使用：</strong>在某些场合，比如要对行为进行&quot;记录、撤销/重做、事务&quot;等处理，这种无法抵御变化的紧耦合是不合适的。在这种情况下，如何将&quot;行为请求者&quot;与&quot;行为实现者&quot;解耦？将一组行为抽象为对象，可以实现二者之间的松耦合。</p>
<p><strong>如何解决：</strong>通过调用者调用接受者执行命令，顺序：调用者→接受者→命令。</p>
<p><strong>关键代码：</strong>定义三个角色：1、received 真正的命令执行对象 2、Command 3、invoker 使用命令对象的入口</p>
<p><strong>应用实例：</strong>struts 1 中的 action 核心控制器 ActionServlet 只有一个，相当于 Invoker，而模型层的类会随着不同的应用有不同的模型类，相当于具体的 Command。</p>
<p><strong>优点：</strong> 1、降低了系统耦合度。 2、新的命令可以很容易添加到系统中去。</p>
<p><strong>缺点：</strong>使用命令模式可能会导致某些系统有过多的具体命令类。</p>
<p><strong>使用场景：</strong>认为是命令的地方都可以使用命令模式，比如： 1、GUI 中每一个按钮都是一条命令。 2、模拟 CMD。</p>
<p><strong>注意事项：</strong>系统需要支持命令的撤销(Undo)操作和恢复(Redo)操作，也可以考虑使用命令模式，见命令模式的扩展。</p>
<h2 id="实现-14">实现</h2>
<p>我们首先创建作为命令的接口 <em>Order</em>，然后创建作为请求的 <em>Stock</em> 类。实体命令类 <em>BuyStock</em> 和 <em>SellStock</em>，实现了 <em>Order</em> 接口，将执行实际的命令处理。创建作为调用对象的类 <em>Broker</em>，它接受订单并能下订单。</p>
<p><em>Broker</em> 对象使用命令模式，基于命令的类型确定哪个对象执行哪个命令。<em>CommandPatternDemo</em>，我们的演示类使用 <em>Broker</em> 类来演示命令模式。</p>
<p><img src="/20200426l2/command_pattern_uml_diagram.jpg"></p>
<h1 id="解释器模式interpreter-pattern">解释器模式（Interpreter Pattern）</h1>
<h2 id="简介-16">简介</h2>
<p>解释器模式（Interpreter Pattern）提供了评估语言的语法或表达式的方式，它属于行为型模式。这种模式实现了一个表达式接口，该接口解释一个特定的上下文。这种模式被用在 SQL 解析、符号处理引擎等。</p>
<p><strong>意图：</strong>给定一个语言，定义它的文法表示，并定义一个解释器，这个解释器使用该标识来解释语言中的句子。</p>
<p><strong>主要解决：</strong>对于一些固定文法构建一个解释句子的解释器。</p>
<p><strong>何时使用：</strong>如果一种特定类型的问题发生的频率足够高，那么可能就值得将该问题的各个实例表述为一个简单语言中的句子。这样就可以构建一个解释器，该解释器通过解释这些句子来解决该问题。</p>
<p><strong>如何解决：</strong>构建语法树，定义终结符与非终结符。</p>
<p><strong>关键代码：</strong>构建环境类，包含解释器之外的一些全局信息，一般是 HashMap。</p>
<p><strong>应用实例：</strong>编译器、运算表达式计算。</p>
<p><strong>优点：</strong> 1、可扩展性比较好，灵活。 2、增加了新的解释表达式的方式。 3、易于实现简单文法。</p>
<p><strong>缺点：</strong> 1、可利用场景比较少。 2、对于复杂的文法比较难维护。 3、解释器模式会引起类膨胀。 4、解释器模式采用递归调用方法。</p>
<p><strong>使用场景：</strong> 1、可以将一个需要解释执行的语言中的句子表示为一个抽象语法树。 2、一些重复出现的问题可以用一种简单的语言来进行表达。 3、一个简单语法需要解释的场景。</p>
<p><strong>注意事项：</strong>可利用场景比较少，JAVA 中如果碰到可以用 expression4J 代替。</p>
<h2 id="实现-15">实现</h2>
<p>我们将创建一个接口 <em>Expression</em> 和实现了 <em>Expression</em> 接口的实体类。定义作为上下文中主要解释器的 <em>TerminalExpression</em> 类。其他的类 <em>OrExpression</em>、<em>AndExpression</em> 用于创建组合式表达式。</p>
<p><em>InterpreterPatternDemo</em>，我们的演示类使用 <em>Expression</em> 类创建规则和演示表达式的解析。</p>
<p><img src="/20200426l2/interpreter_pattern_uml_diagram.jpg"></p>
<h1 id="迭代器模式iterator-pattern">迭代器模式（Iterator Pattern）</h1>
<h2 id="简介-17">简介</h2>
<p>迭代器模式（Iterator Pattern）是 Java 和 .Net 编程环境中非常常用的设计模式。这种模式用于顺序访问集合对象的元素，不需要知道集合对象的底层表示。</p>
<p>迭代器模式属于行为型模式。</p>
<p><strong>意图：</strong>提供一种方法顺序访问一个聚合对象中各个元素, 而又无须暴露该对象的内部表示。</p>
<p><strong>主要解决：</strong>不同的方式来遍历整个整合对象。</p>
<p><strong>何时使用：</strong>遍历一个聚合对象。</p>
<p><strong>如何解决：</strong>把在元素之间游走的责任交给迭代器，而不是聚合对象。</p>
<p><strong>关键代码：</strong>定义接口：hasNext, next。</p>
<p><strong>应用实例：</strong>JAVA 中的 iterator。</p>
<p><strong>优点：</strong> 1、它支持以不同的方式遍历一个聚合对象。 2、迭代器简化了聚合类。 3、在同一个聚合上可以有多个遍历。 4、在迭代器模式中，增加新的聚合类和迭代器类都很方便，无须修改原有代码。</p>
<p><strong>缺点：</strong>由于迭代器模式将存储数据和遍历数据的职责分离，增加新的聚合类需要对应增加新的迭代器类，类的个数成对增加，这在一定程度上增加了系统的复杂性。</p>
<p><strong>使用场景：</strong> 1、访问一个聚合对象的内容而无须暴露它的内部表示。 2、需要为聚合对象提供多种遍历方式。 3、为遍历不同的聚合结构提供一个统一的接口。</p>
<p><strong>注意事项：</strong>迭代器模式就是分离了集合对象的遍历行为，抽象出一个迭代器类来负责，这样既可以做到不暴露集合的内部结构，又可让外部代码透明地访问集合内部的数据。</p>
<h2 id="实现-16">实现</h2>
<p>我们将创建一个叙述导航方法的 <em>Iterator</em> 接口和一个返回迭代器的 <em>Container</em> 接口。实现了 <em>Container</em> 接口的实体类将负责实现 <em>Iterator</em> 接口。</p>
<p><em>IteratorPatternDemo</em>，我们的演示类使用实体类 <em>NamesRepository</em> 来打印 <em>NamesRepository</em> 中存储为集合的 <em>Names</em>。</p>
<p><img src="/20200426l2/iterator_pattern_uml_diagram.jpg"></p>
<h1 id="中介者模式mediator-pattern">中介者模式（Mediator Pattern）</h1>
<h2 id="简介-18">简介</h2>
<p>中介者模式（Mediator Pattern）是用来降低多个对象和类之间的通信复杂性。这种模式提供了一个中介类，该类通常处理不同类之间的通信，并支持松耦合，使代码易于维护。中介者模式属于行为型模式。</p>
<p><strong>意图：</strong>用一个中介对象来封装一系列的对象交互，中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。</p>
<p><strong>主要解决：</strong>对象与对象之间存在大量的关联关系，这样势必会导致系统的结构变得很复杂，同时若一个对象发生改变，我们也需要跟踪与之相关联的对象，同时做出相应的处理。</p>
<p><strong>何时使用：</strong>多个类相互耦合，形成了网状结构。</p>
<p><strong>如何解决：</strong>将上述网状结构分离为星型结构。</p>
<p><strong>关键代码：</strong>对象 Colleague 之间的通信封装到一个类中单独处理。</p>
<p><strong>应用实例：</strong> 1、中国加入 WTO 之前是各个国家相互贸易，结构复杂，现在是各个国家通过 WTO 来互相贸易。 2、机场调度系统。 3、MVC 框架，其中C（控制器）就是 M（模型）和 V（视图）的中介者。</p>
<p><strong>优点：</strong> 1、降低了类的复杂度，将一对多转化成了一对一。 2、各个类之间的解耦。 3、符合迪米特原则。</p>
<p><strong>缺点：</strong>中介者会庞大，变得复杂难以维护。</p>
<p><strong>使用场景：</strong> 1、系统中对象之间存在比较复杂的引用关系，导致它们之间的依赖关系结构混乱而且难以复用该对象。 2、想通过一个中间类来封装多个类中的行为，而又不想生成太多的子类。</p>
<p><strong>注意事项：</strong>不应当在职责混乱的时候使用。</p>
<h2 id="实现-17">实现</h2>
<p>我们通过聊天室实例来演示中介者模式。实例中，多个用户可以向聊天室发送消息，聊天室向所有的用户显示消息。我们将创建两个类 <em>ChatRoom</em> 和 <em>User</em>。<em>User</em> 对象使用 <em>ChatRoom</em> 方法来分享他们的消息。</p>
<p><em>MediatorPatternDemo</em>，我们的演示类使用 <em>User</em> 对象来显示他们之间的通信。</p>
<p><img src="/20200426l2/mediator_pattern_uml_diagram.jpg"></p>
<h1 id="备忘录模式memento-pattern">备忘录模式（Memento Pattern）</h1>
<h2 id="简介-19">简介</h2>
<p>备忘录模式（Memento Pattern）保存一个对象的某个状态，以便在适当的时候恢复对象。备忘录模式属于行为型模式。</p>
<p><strong>意图：</strong>在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。</p>
<p><strong>主要解决：</strong>所谓备忘录模式就是在不破坏封装的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态，这样可以在以后将对象恢复到原先保存的状态。</p>
<p><strong>何时使用：</strong>很多时候我们总是需要记录一个对象的内部状态，这样做的目的就是为了允许用户取消不确定或者错误的操作，能够恢复到他原先的状态，使得他有&quot;后悔药&quot;可吃。</p>
<p><strong>如何解决：</strong>通过一个备忘录类专门存储对象状态。</p>
<p><strong>关键代码：</strong>客户不与备忘录类耦合，与备忘录管理类耦合。</p>
<p><strong>应用实例：</strong> 1、后悔药。 2、打游戏时的存档。 3、Windows 里的 ctri + z。 4、IE 中的后退。 4、数据库的事务管理。</p>
<p><strong>优点：</strong> 1、给用户提供了一种可以恢复状态的机制，可以使用户能够比较方便地回到某个历史的状态。 2、实现了信息的封装，使得用户不需要关心状态的保存细节。</p>
<p><strong>缺点：</strong>消耗资源。如果类的成员变量过多，势必会占用比较大的资源，而且每一次保存都会消耗一定的内存。</p>
<p><strong>使用场景：</strong> 1、需要保存/恢复数据的相关状态场景。 2、提供一个可回滚的操作。</p>
<p><strong>注意事项：</strong> 1、为了符合迪米特原则，还要增加一个管理备忘录的类。 2、为了节约内存，可使用原型模式+备忘录模式。</p>
<h2 id="实现-18">实现</h2>
<p>备忘录模式使用三个类 <em>Memento</em>、<em>Originator</em> 和 <em>CareTaker</em>。Memento 包含了要被恢复的对象的状态。Originator 创建并在 Memento 对象中存储状态。Caretaker 对象负责从 Memento 中恢复对象的状态。</p>
<p><em>MementoPatternDemo</em>，我们的演示类使用 <em>CareTaker</em> 和 <em>Originator</em> 对象来显示对象的状态恢复。</p>
<p><img src="/20200426l2/memento_pattern_uml_diagram.jpg"></p>
<h1 id="观察者模式observer-pattern">观察者模式（Observer Pattern）</h1>
<h2 id="简介-20">简介</h2>
<p>当对象间存在一对多关系时，则使用观察者模式（Observer Pattern）。比如，当一个对象被修改时，则会自动通知它的依赖对象。观察者模式属于行为型模式。</p>
<p><strong>意图：</strong>定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。</p>
<p><strong>主要解决：</strong>一个对象状态改变给其他对象通知的问题，而且要考虑到易用和低耦合，保证高度的协作。</p>
<p><strong>何时使用：</strong>一个对象（目标对象）的状态发生改变，所有的依赖对象（观察者对象）都将得到通知，进行广播通知。</p>
<p><strong>如何解决：</strong>使用面向对象技术，可以将这种依赖关系弱化。</p>
<p><strong>关键代码：</strong>在抽象类里有一个 ArrayList 存放观察者们。</p>
<p><strong>应用实例：</strong> 1、拍卖的时候，拍卖师观察最高标价，然后通知给其他竞价者竞价。 2、西游记里面悟空请求菩萨降服红孩儿，菩萨洒了一地水招来一个老乌龟，这个乌龟就是观察者，他观察菩萨洒水这个动作。</p>
<p><strong>优点：</strong> 1、观察者和被观察者是抽象耦合的。 2、建立一套触发机制。</p>
<p><strong>缺点：</strong> 1、如果一个被观察者对象有很多的直接和间接的观察者的话，将所有的观察者都通知到会花费很多时间。 2、如果在观察者和观察目标之间有循环依赖的话，观察目标会触发它们之间进行循环调用，可能导致系统崩溃。 3、观察者模式没有相应的机制让观察者知道所观察的目标对象是怎么发生变化的，而仅仅只是知道观察目标发生了变化。</p>
<p><strong>使用场景：</strong></p>
<ul>
<li>一个抽象模型有两个方面，其中一个方面依赖于另一个方面。将这些方面封装在独立的对象中使它们可以各自独立地改变和复用。</li>
<li>一个对象的改变将导致其他一个或多个对象也发生改变，而不知道具体有多少对象将发生改变，可以降低对象之间的耦合度。</li>
<li>一个对象必须通知其他对象，而并不知道这些对象是谁。</li>
<li>需要在系统中创建一个触发链，A对象的行为将影响B对象，B对象的行为将影响C对象……，可以使用观察者模式创建一种链式触发机制。</li>
</ul>
<p><strong>注意事项：</strong> 1、JAVA 中已经有了对观察者模式的支持类。 2、避免循环引用。 3、如果顺序执行，某一观察者错误会导致系统卡壳，一般采用异步方式。</p>
<h2 id="实现-19">实现</h2>
<p>观察者模式使用三个类 Subject、Observer 和 Client。Subject 对象带有绑定观察者到 Client 对象和从 Client 对象解绑观察者的方法。我们创建 <em>Subject</em> 类、<em>Observer</em> 抽象类和扩展了抽象类 <em>Observer</em> 的实体类。</p>
<p><em>ObserverPatternDemo</em>，我们的演示类使用 <em>Subject</em> 和实体类对象来演示观察者模式。</p>
<p><img src="/20200426l2/observer_pattern_uml_diagram.jpg"></p>
<h1 id="状态模式state-pattern">状态模式（State Pattern）</h1>
<h2 id="简介-21">简介</h2>
<p>在状态模式（State Pattern）中，类的行为是基于它的状态改变的。这种类型的设计模式属于行为型模式。</p>
<p>在状态模式中，我们创建表示各种状态的对象和一个行为随着状态对象改变而改变的 context 对象。</p>
<p><strong>意图：</strong>允许对象在内部状态发生改变时改变它的行为，对象看起来好像修改了它的类。</p>
<p><strong>主要解决：</strong>对象的行为依赖于它的状态（属性），并且可以根据它的状态改变而改变它的相关行为。</p>
<p><strong>何时使用：</strong>代码中包含大量与对象状态有关的条件语句。</p>
<p><strong>如何解决：</strong>将各种具体的状态类抽象出来。</p>
<p><strong>关键代码：</strong>通常命令模式的接口中只有一个方法。而状态模式的接口中有一个或者多个方法。而且，状态模式的实现类的方法，一般返回值，或者是改变实例变量的值。也就是说，状态模式一般和对象的状态有关。实现类的方法有不同的功能，覆盖接口中的方法。状态模式和命令模式一样，也可以用于消除 if...else 等条件选择语句。</p>
<p><strong>应用实例：</strong> 1、打篮球的时候运动员可以有正常状态、不正常状态和超常状态。 2、曾侯乙编钟中，'钟是抽象接口','钟A'等是具体状态，'曾侯乙编钟'是具体环境（Context）。</p>
<p><strong>优点：</strong> 1、封装了转换规则。 2、枚举可能的状态，在枚举状态之前需要确定状态种类。 3、将所有与某个状态有关的行为放到一个类中，并且可以方便地增加新的状态，只需要改变对象状态即可改变对象的行为。 4、允许状态转换逻辑与状态对象合成一体，而不是某一个巨大的条件语句块。 5、可以让多个环境对象共享一个状态对象，从而减少系统中对象的个数。</p>
<p><strong>缺点：</strong> 1、状态模式的使用必然会增加系统类和对象的个数。 2、状态模式的结构与实现都较为复杂，如果使用不当将导致程序结构和代码的混乱。 3、状态模式对&quot;开闭原则&quot;的支持并不太好，对于可以切换状态的状态模式，增加新的状态类需要修改那些负责状态转换的源代码，否则无法切换到新增状态，而且修改某个状态类的行为也需修改对应类的源代码。</p>
<p><strong>使用场景：</strong> 1、行为随状态改变而改变的场景。 2、条件、分支语句的代替者。</p>
<p><strong>注意事项：</strong>在行为受状态约束的时候使用状态模式，而且状态不超过 5 个。</p>
<h2 id="实现-20">实现</h2>
<p>我们将创建一个 <em>State</em> 接口和实现了 <em>State</em> 接口的实体状态类。<em>Context</em> 是一个带有某个状态的类。</p>
<p><em>StatePatternDemo</em>，我们的演示类使用 <em>Context</em> 和状态对象来演示 Context 在状态改变时的行为变化。</p>
<p><img src="/20200426l2/state_pattern_uml_diagram.png"></p>
<h1 id="空对象模式null-object-pattern">空对象模式（Null Object Pattern）</h1>
<h2 id="简介-22">简介</h2>
<p>在空对象模式（Null Object Pattern）中，一个空对象取代 NULL 对象实例的检查。Null 对象不是检查空值，而是反应一个不做任何动作的关系。这样的 Null 对象也可以在数据不可用的时候提供默认的行为。</p>
<p>在空对象模式中，我们创建一个指定各种要执行的操作的抽象类和扩展该类的实体类，还创建一个未对该类做任何实现的空对象类，该空对象类将无缝地使用在需要检查空值的地方。</p>
<h2 id="实现-21">实现</h2>
<p>我们将创建一个定义操作（在这里，是客户的名称）的 <em>AbstractCustomer</em> 抽象类，和扩展了 <em>AbstractCustomer</em> 类的实体类。工厂类 <em>CustomerFactory</em> 基于客户传递的名字来返回 <em>RealCustomer</em> 或 <em>NullCustomer</em> 对象。</p>
<p><em>NullPatternDemo</em>，我们的演示类使用 <em>CustomerFactory</em> 来演示空对象模式的用法。</p>
<p><img src="/20200426l2/null_pattern_uml_diagram.jpg"></p>
<h1 id="策略模式strategy-pattern">策略模式（Strategy Pattern）</h1>
<h2 id="简介-23">简介</h2>
<p>在策略模式（Strategy Pattern）中，一个类的行为或其算法可以在运行时更改。这种类型的设计模式属于行为型模式。</p>
<p>在策略模式中，我们创建表示各种策略的对象和一个行为随着策略对象改变而改变的 context 对象。策略对象改变 context 对象的执行算法。</p>
<p><strong>意图：</strong>定义一系列的算法,把它们一个个封装起来, 并且使它们可相互替换。</p>
<p><strong>主要解决：</strong>在有多种算法相似的情况下，使用 if...else 所带来的复杂和难以维护。</p>
<p><strong>何时使用：</strong>一个系统有许多许多类，而区分它们的只是他们直接的行为。</p>
<p><strong>如何解决：</strong>将这些算法封装成一个一个的类，任意地替换。</p>
<p><strong>关键代码：</strong>实现同一个接口。</p>
<p><strong>应用实例：</strong> 1、诸葛亮的锦囊妙计，每一个锦囊就是一个策略。 2、旅行的出游方式，选择骑自行车、坐汽车，每一种旅行方式都是一个策略。 3、JAVA AWT 中的 LayoutManager。</p>
<p><strong>优点：</strong> 1、算法可以自由切换。 2、避免使用多重条件判断。 3、扩展性良好。</p>
<p><strong>缺点：</strong> 1、策略类会增多。 2、所有策略类都需要对外暴露。</p>
<p><strong>使用场景：</strong> 1、如果在一个系统里面有许多类，它们之间的区别仅在于它们的行为，那么使用策略模式可以动态地让一个对象在许多行为中选择一种行为。 2、一个系统需要动态地在几种算法中选择一种。 3、如果一个对象有很多的行为，如果不用恰当的模式，这些行为就只好使用多重的条件选择语句来实现。</p>
<p><strong>注意事项：</strong>如果一个系统的策略多于四个，就需要考虑使用混合模式，解决策略类膨胀的问题。</p>
<h2 id="实现-22">实现</h2>
<p>我们将创建一个定义活动的 <em>Strategy</em> 接口和实现了 <em>Strategy</em> 接口的实体策略类。<em>Context</em> 是一个使用了某种策略的类。</p>
<p><em>StrategyPatternDemo</em>，我们的演示类使用 <em>Context</em> 和策略对象来演示 Context 在它所配置或使用的策略改变时的行为变化。</p>
<p><img src="/20200426l2/strategy_pattern_uml_diagram.jpg"></p>
<h1 id="模板模式template-pattern">模板模式（Template Pattern）</h1>
<h2 id="简介-24">简介</h2>
<p>在模板模式（Template Pattern）中，一个抽象类公开定义了执行它的方法的方式/模板。它的子类可以按需要重写方法实现，但调用将以抽象类中定义的方式进行。这种类型的设计模式属于行为型模式。</p>
<p><strong>意图：</strong>定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。</p>
<p><strong>主要解决：</strong>一些方法通用，却在每一个子类都重新写了这一方法。</p>
<p><strong>何时使用：</strong>有一些通用的方法。</p>
<p><strong>如何解决：</strong>将这些通用算法抽象出来。</p>
<p><strong>关键代码：</strong>在抽象类实现，其他步骤在子类实现。</p>
<p><strong>应用实例：</strong> 1、在造房子的时候，地基、走线、水管都一样，只有在建筑的后期才有加壁橱加栅栏等差异。 2、西游记里面菩萨定好的 81 难，这就是一个顶层的逻辑骨架。 3、spring 中对 Hibernate 的支持，将一些已经定好的方法封装起来，比如开启事务、获取 Session、关闭 Session 等，程序员不重复写那些已经规范好的代码，直接丢一个实体就可以保存。</p>
<p><strong>优点：</strong> 1、封装不变部分，扩展可变部分。 2、提取公共代码，便于维护。 3、行为由父类控制，子类实现。</p>
<p><strong>缺点：</strong>每一个不同的实现都需要一个子类来实现，导致类的个数增加，使得系统更加庞大。</p>
<p><strong>使用场景：</strong> 1、有多个子类共有的方法，且逻辑相同。 2、重要的、复杂的方法，可以考虑作为模板方法。</p>
<p><strong>注意事项：</strong>为防止恶意操作，一般模板方法都加上 final 关键词。</p>
<h2 id="实现-23">实现</h2>
<p>我们将创建一个定义操作的 <em>Game</em> 抽象类，其中，模板方法设置为 final，这样它就不会被重写。<em>Cricket</em> 和 <em>Football</em> 是扩展了 <em>Game</em> 的实体类，它们重写了抽象类的方法。</p>
<p><em>TemplatePatternDemo</em>，我们的演示类使用 <em>Game</em> 来演示模板模式的用法。</p>
<p><img src="https://www.runoob.com/wp-content/uploads/2014/08/template_pattern_uml_diagram.jpg"></p>
<h1 id="访问者模式visitor-pattern">访问者模式（Visitor Pattern）</h1>
<h2 id="简介-25">简介</h2>
<p>在访问者模式（Visitor Pattern）中，我们使用了一个访问者类，它改变了元素类的执行算法。通过这种方式，元素的执行算法可以随着访问者改变而改变。这种类型的设计模式属于行为型模式。根据模式，元素对象已接受访问者对象，这样访问者对象就可以处理元素对象上的操作。</p>
<p><strong>意图：</strong>主要将数据结构与数据操作分离。</p>
<p><strong>主要解决：</strong>稳定的数据结构和易变的操作耦合问题。</p>
<p><strong>何时使用：</strong>需要对一个对象结构中的对象进行很多不同的并且不相关的操作，而需要避免让这些操作&quot;污染&quot;这些对象的类，使用访问者模式将这些封装到类中。</p>
<p><strong>如何解决：</strong>在被访问的类里面加一个对外提供接待访问者的接口。</p>
<p><strong>关键代码：</strong>在数据基础类里面有一个方法接受访问者，将自身引用传入访问者。</p>
<p><strong>应用实例：</strong>您在朋友家做客，您是访问者，朋友接受您的访问，您通过朋友的描述，然后对朋友的描述做出一个判断，这就是访问者模式。</p>
<p><strong>优点：</strong> 1、符合单一职责原则。 2、优秀的扩展性。 3、灵活性。</p>
<p><strong>缺点：</strong> 1、具体元素对访问者公布细节，违反了迪米特原则。 2、具体元素变更比较困难。 3、违反了依赖倒置原则，依赖了具体类，没有依赖抽象。</p>
<p><strong>使用场景：</strong> 1、对象结构中对象对应的类很少改变，但经常需要在此对象结构上定义新的操作。 2、需要对一个对象结构中的对象进行很多不同的并且不相关的操作，而需要避免让这些操作&quot;污染&quot;这些对象的类，也不希望在增加新操作时修改这些类。</p>
<p><strong>注意事项：</strong>访问者可以对功能进行统一，可以做报表、UI、拦截器与过滤器。</p>
<h2 id="实现-24">实现</h2>
<p>我们将创建一个定义接受操作的 <em>ComputerPart</em> 接口。<em>Keyboard</em>、<em>Mouse</em>、<em>Monitor</em> 和 <em>Computer</em> 是实现了 <em>ComputerPart</em> 接口的实体类。我们将定义另一个接口 <em>ComputerPartVisitor</em>，它定义了访问者类的操作。<em>Computer</em> 使用实体访问者来执行相应的动作。</p>
<p><em>VisitorPatternDemo</em>，我们的演示类使用 <em>Computer</em>、<em>ComputerPartVisitor</em> 类来演示访问者模式的用法。</p>
<p><img src="/20200426l2/visitor_pattern_uml_diagram.jpg"></p>
<hr>
<p>参考文献：</p>
<p><a href="https://www.runoob.com/design-pattern/design-pattern-tutorial.html" target="_blank" rel="external nofollow noopener noreferrer">设计模式|菜鸟教程</a></p>
]]></content>
      <categories>
        <category>知识点</category>
      </categories>
      <tags>
        <tag>软件工程</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>【牛客网】软件工程</title>
    <url>/20200426l1/</url>
    <content><![CDATA[<h1 id="范围说明书是项目队伍与项目客户之间通过确定项目目标及主要的项目可交付成果而达成协议的基础">范围说明书是项目队伍与项目客户之间通过确定项目目标及主要的项目可交付成果而达成协议的基础</h1>
<p>在进行范围确定前，一定要有范围说明书，因为范围说明书详细说明了为什么要进行这个项目，明确了项目的目标和主要的可交付成果，是项目班子和任务委托者之间签订协议的基础，也是未来项目实施的基础，并且随着项目的不断实施进展，需要对范围说明进行修改和细化，以反映项目本身和外部环境的变化。在实际的项目实施中，不管是对于项目还是子项目，项目管理人员都要编写其各自的项目范围说明书。</p>
<h1 id="原型的作用">原型的作用</h1>
<p>用以给客户和分析员共同研究，澄清需求。而不是单方向的让分析员去搞懂用户的需求，因为一般采用原型，都是因为客户自己都搞不清楚自己的需求。所以原型的作用应该是让双方都搞懂需求。</p>
<h1 id="面向对象的分析方法主要是建立三类模型">面向对象的分析方法主要是建立三类模型</h1>
<p>对象模型、动态模型、功能模型</p>
<p>面向对象分析主要由对象模型、动态模型、功能模型组成，其中对象模型是最基本、最重要、最核心的；</p>
<p>面向对象建模得到的模型包含系统的三个要素：静态结构（对象模型）、交互模型（动态模型）、数据变换（功能模型）；</p>
<p>对象模型的五个层次：主题层、类与对象层、结构层、属性层、服务层。</p>
<h1 id="通常情况下软件运行剖面难以直接获得在工程上按照">通常情况下，软件运行剖面难以直接获得，在工程上按照</h1>
<ol type="1">
<li>确定客户剖面</li>
<li>建立用户剖面</li>
<li>定义系统剖面</li>
<li>确定功能剖面</li>
<li>确定运行剖面</li>
</ol>
<h1 id="pad图也称问题分析图其特点是">PAD图也称问题分析图，其特点是</h1>
<ol type="1">
<li>主要用于描述软件详细设计的图形表示工具</li>
<li>在PAD图中智能描述结构化程序允许使用的几种基本结构</li>
<li>PAD中只有方框，没有菱形和箭头表示</li>
<li>最左端的纵线是程序的主干线，对应程序的第一层结构；每增加一层PAD图向右扩展一条纵线，程序的纵线数等于程序层次数</li>
</ol>
<h1 id="用户界面设计的原则">用户界面设计的原则</h1>
<p>主要有三大原则：</p>
<ul>
<li>置界面于用户的控制之下</li>
<li>减少用户的记忆负担</li>
<li>保持界面的一致性</li>
</ul>
<p>详细说来有以下几点：</p>
<ol type="1">
<li><p>简易性</p>
<p>界面的简洁是要让用户便于使用、便于了解、并能减少用户发生错误选择的可能性。</p></li>
<li><p>用户语言</p>
<p>界面中要使用能反应用户本身的语言，而不是游戏设计者的语言。</p></li>
<li><p>记忆负担最小化</p>
<p>人脑不是电脑，在设计界面时必须要考虑人类大脑处理信息的限度。人类的短期记忆不稳定、有限，24小时内存在25%的遗忘率。所以对用户来说，浏览信息要比记忆更容易。</p></li>
<li><p>一致性</p>
<p>是每一个优秀界面都具备的特点。界面的结构必须清晰且一致，风格必须与游戏内容相一致。</p></li>
<li><p>清楚</p>
<p>在视觉效果上便于理解和使用。</p></li>
<li><p>用户的熟悉程度</p>
<p>用户可通过已掌握的知识来使用界面，但不应超出一般常识。</p></li>
<li><p>从用户的观点考虑</p>
<p>想用户所想，做用户所做。用户总是按照他们的方法理解和使用。</p>
<p>通过比较两个不同世界（真实与虚拟）的事物，完成更好的设计。如：书籍对比竹简。</p></li>
<li><p>排列</p>
<p>一个有序的界面能让用户轻松的使用。</p></li>
<li><p>安全性</p>
<p>用户能自由的作出选择，且所有选择都是可逆的。在用户作出危险的选择时有信息介入系统的提示。</p></li>
<li><p>灵活性</p>
<p>简单来说就是要让用户方便的使用，但不同于上述。即互动重用性，不局限于单一的工具（包括鼠标、键盘或手柄）。</p></li>
<li><p>人性化</p>
<p>高效率和用户满意度是人性化的体现。应具备专家级和初级玩家系统，即用户可依据自己的习惯定制界面，并能保存设置。</p></li>
</ol>
<h1 id="如何定义数据">如何定义数据</h1>
<h2 id="概念">概念</h2>
<p>因为在一个系统当中，数据通常都是复合的——由很多简单的数据元素组成。那我们如何使用简单的元素去描述这些复杂的数据呢？数据定义做的就是这个工作</p>
<p>定义数据采用的原则：自顶向下分解。 数据元素组成数据的方式：</p>
<ol type="1">
<li>顺序：（复合数据）以确定的次序连接两个或多个数据元素。</li>
<li>选择：（复合数据）从两个或多个数据元素中选一个。</li>
<li>重复：（复合数据）是 把指定的数据元素重复两次或多次 而组成的。</li>
<li>可选：（在复合数据中）此数据元素是可有可无的。</li>
</ol>
<h2 id="如何定义">如何定义</h2>
<p>由于文字会具有歧义，所以数据字典中同样采用符号的形式来定义这四类元素。有消除歧义、方便理解、清晰简洁等功效。</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">符号</th>
<th style="text-align: center;">含义</th>
<th style="text-align: center;">举例</th>
<th style="text-align: center;">含义</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">=</td>
<td style="text-align: center;">等价于/定义为</td>
<td style="text-align: center;">x=a</td>
<td style="text-align: center;">数据x是由数据a组成的。通常我们把被定义的数据放在等号左边，把定义的数据放在等号右边</td>
</tr>
<tr class="even">
<td style="text-align: center;">+</td>
<td style="text-align: center;">与/连接</td>
<td style="text-align: center;">x=a+b</td>
<td style="text-align: center;">数据x是由a，b两个元素按顺序组成的</td>
</tr>
<tr class="odd">
<td style="text-align: center;">[]</td>
<td style="text-align: center;">或/选择</td>
<td style="text-align: center;">x=[a|b]</td>
<td style="text-align: center;">数据x是由a数据元素或b数据元素组成的</td>
</tr>
<tr class="even">
<td style="text-align: center;">m{}n</td>
<td style="text-align: center;">重复m...n次</td>
<td style="text-align: center;">x=1{a}5</td>
<td style="text-align: center;">数据x是由a数据元素最少重复1次，最多重复5次组成的</td>
</tr>
<tr class="odd">
<td style="text-align: center;">()</td>
<td style="text-align: center;">可选</td>
<td style="text-align: center;">x=a+(b)</td>
<td style="text-align: center;">数据x是由a，b两个元素按顺序组成的，但b数据元素可有可无</td>
</tr>
<tr class="even">
<td style="text-align: center;">&quot;&quot;</td>
<td style="text-align: center;">基本数据元素</td>
<td style="text-align: center;">x=&quot;0&quot;</td>
<td style="text-align: center;">数据x就是由&quot;0&quot;这个基本数据元素组成</td>
</tr>
<tr class="odd">
<td style="text-align: center;">...</td>
<td style="text-align: center;">范围</td>
<td style="text-align: center;">x=&quot;1&quot;...&quot;9&quot;</td>
<td style="text-align: center;">数据x只能等于1~9之间的某个元素</td>
</tr>
</tbody>
</table>
<h1 id="结构化程序设计原则">结构化程序设计原则</h1>
<ul>
<li>自顶向下</li>
<li>逐步求精</li>
<li>模块化</li>
<li>限制使用goto语句</li>
</ul>
<h1 id="外观模式">外观模式</h1>
<p>参考地址：<a href="https://www.runoob.com/design-pattern/facade-pattern.html" target="_blank" rel="external nofollow noopener noreferrer">菜鸟教程</a></p>
<p>外观模式（Facade Pattern）隐藏系统的复杂性，并向客户端提供了一个客户端可以访问系统的接口。这种类型的设计模式属于结构型模式，它向现有的系统添加一个接口，来隐藏系统的复杂性。</p>
<p>这种模式涉及到一个单一的类，该类提供了客户端请求的简化方法和对现有系统类方法的委托调用。</p>
<p><strong>意图：</strong>为子系统中的一组接口提供一个一致的界面，外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。</p>
<p><strong>主要解决：</strong>降低访问复杂系统的内部子系统时的复杂度，简化客户端与之的接口。</p>
<p><strong>何时使用：</strong> 1、客户端不需要知道系统内部的复杂联系，整个系统只需提供一个&quot;接待员&quot;即可。 2、定义系统的入口。</p>
<p><strong>如何解决：</strong>客户端不与系统耦合，外观类与系统耦合。</p>
<p><strong>关键代码：</strong>在客户端和复杂系统之间再加一层，这一层将调用顺序、依赖关系等处理好。</p>
<p><strong>应用实例：</strong> 1、去医院看病，可能要去挂号、门诊、划价、取药，让患者或患者家属觉得很复杂，如果有提供接待人员，只让接待人员来处理，就很方便。 2、JAVA 的三层开发模式。</p>
<p><strong>优点：</strong> 1、减少系统相互依赖。 2、提高灵活性。 3、提高了安全性。</p>
<p><strong>缺点：</strong>不符合开闭原则，如果要改东西很麻烦，继承重写都不合适。</p>
<p><strong>使用场景：</strong> 1、为复杂的模块或子系统提供外界访问的模块。 2、子系统相对独立。 3、预防低水平人员带来的风险。</p>
<p><strong>注意事项：</strong>在层次化结构中，可以使用外观模式定义系统中每一层的入口。</p>
<p><img src="/20200426l1/facade_pattern_uml_diagram.jpg"></p>
<h1 id="cmmi等级划分">CMMI等级划分</h1>
<p>参考地址：<a href="https://blog.csdn.net/daijin888888/article/details/55004209" target="_blank" rel="external nofollow noopener noreferrer">CMMI（软件能力成熟度集成模型）</a></p>
<p>CMMI全称是Capability Maturity Model Integration，即能力成熟度模型集成（也有称为：软件能力成熟度集成模型），本质是软件管理工程的一个部分。CMMI认证的目的是帮助软件企业对软件工程过程进行管理和改进，增强开发与改进能力，从而能按时地、不超预算地开发出高质量的软件。CMMI主要关注点就是成本效益、明确重点、过程集中和灵活性四个方面。</p>
<p>CMMI认证分为5个等级:</p>
<p>1． 初始级</p>
<p>软件过程是无序的，有时甚至是混乱的，对过程几乎没有定义，成功取决于个人努力。管理是反应式的。</p>
<p>2．可管理级</p>
<p>建立了基本的项目管理过程来跟踪费用、进度和功能特性。制定了必要的过程纪律，能重复早先类似应用项目取得的成功经验。</p>
<p>3． 已定义级</p>
<p>已将软件管理和工程两方面的过程文档化、标准化，并综合成该组织的标准软件过程。所有项目均使用经批准、剪裁的标准软件过程来开发和维护软件，软件产品的生产在整个软件过程是可见的。</p>
<p>4． 量化管理级</p>
<p>分析对软件过程和产品质量的详细度量数据，对软件过程和产品都有定量的理解与控制。管理有一个作出结论的客观依据，管理能够在定量的范围内预测性能。</p>
<p>5． 优化管理级</p>
<p>过程的量化反馈和先进的新思想、新技术促使过程持续不断改进。</p>
<h1 id="软件实施活动的进入准则">软件实施活动的进入准则</h1>
<ul>
<li>需求工件已经被基线化</li>
<li>详细设计工件已经被基线化</li>
<li>构架工件已经被基线化</li>
</ul>
<h1 id="软件可维护性的特性中相互矛盾的是">软件可维护性的特性中相互矛盾的是</h1>
<p>效率和可修改性</p>
<h1 id="软件调试技术">软件调试技术</h1>
<ul>
<li>试探法（强行排错法）</li>
<li>回溯法：人工沿着程序的控制流程跟踪代码，直到找出错误根源为止</li>
<li>对分查找法：缩小错误范围</li>
<li>归纳演绎</li>
<li>原因排除法</li>
</ul>
<h1 id="时间片调度属于_多线程分别绑定cpu属于_">时间片调度属于_<strong><em>，多线程分别绑定CPU属于</em></strong>_。</h1>
<p>并发，并行</p>
<ul>
<li>并发是同时处理很多事情，</li>
<li>并行是同时执行很多事情；</li>
</ul>
<p>并发的关键是你有处理多个任务的能力，不一定要同时。 并行的关键是你有同时处理多个任务的能力。</p>
<p>比如说吃饭的时候来电话了，吃饭和打电话是两件事。</p>
<p>串行：必须吃完饭，才去接电话；</p>
<p>并行：一边吃饭，一边打电话；</p>
<p>并发：先吃饭，电话来了接电话(不一定吃完饭)，电话结束再去吃饭。</p>
<h1 id="软件测试的三个阶段">软件测试的三个阶段</h1>
<p>α、β、λ常用来表示软件测试过程中的三个阶段，α是第一阶段，一般只供内部测试使用；β是第二个阶段，已经消除了软件中大部分的不完善之处，但仍有可能还存在缺陷和漏洞，一般只提供给特定的用户群来测试使用；λ是第三个阶段，此时产品已经相当成熟，只需在个别地方再做进一步的优化处理即可上市发行。 Beta测试是一种验收测试。所谓验收测试是软件产品完成了功能测试和系统测试之后，在产品发布之前所进行的软件测试活动，它是技术测试的最后一个阶段，通过了验收测试，产品就会进入发布阶段。验收测试一般根据产品规格说明书严格检查产品，逐行逐字地对照说明书上对软件产品所做出的各方面要求， 确保所开发的软件产品符合用户的各项要求。 通过综合测试之后，软件已完全组装起来，接口方面的错误也已排除，软件测试的最后一步——验收测试即可开始。验收测试应检查软件能否按合同要求进行工作，即是否满足软件需求说明书中的确认标准。 Beta测试由软件的最终用户们在一个或多个客房场所进行。与Alpha测试不同，开发者通常不在Beta测试的现场，因Beta测试是软件在开发者不能控制的环境中的“真实”应用。用户Beta测试过程中遇到的一切问题（真实在或想像的），并且定期把这些问题报告给开发者。接收到在Beta测试期间报告的问题之后，开发者对软件产品进行必要的修改，并准备向全体客户发布最终的软件产品。</p>
<h1 id="软件测试的过程分为单元测试集成测试确认测试和系统测试几个步骤">软件测试的过程分为（单元测试）、集成测试、确认测试和系统测试几个步骤。</h1>
<p>（1）单元测试（也称模块测试）：针对软件设计的基本单元——程序模块，进行正确性检验的测试工作。目的在于发现各个模块内部可能存在的各种差错。单元测试需要从程序内部结构出发设计测试用例，多个模块可以平行、独立地进行测试；</p>
<p>（2）集成测试（也称组装测试，联合测试）：在单元测试的基础上，将所有模块按设计要求集成在一起进行测试，以检验总体设计中各模块间的接口设计问题、模块之间的相互影响、上层模块存在的各种差错及全局数据结构对系统的影响等方面。</p>
<p>（3）确认测试（也称验收测试，有效性测试）：主要检验软件的功能和性能是否与需求说明书中的规定一致。</p>
<p>（4）系统测试：将软件系统作为一个元素，放入整个实际的计算机系统中，与计算机硬件、其他软件、使用人员等系统元素结合在一起，在实际使用环境下进行综合全面的测试。</p>
<h1 id="瀑布模型增量模型原型模型迭代模型">瀑布模型、增量模型、原型模型、迭代模型</h1>
<ul>
<li>瀑布模型：已使用一种线性开发模型，具有不可回溯性</li>
<li>增量模型：把待开发的软件系统模块化，将每个模块作为一个增量组件，从而分批次地分析、设计、编码和测试这些增量组件</li>
<li>原型模型：适用于已有产品或产品原型（样品），只需客户化的工程项目</li>
<li>迭代模型：软件开发过程每迭代一次，软件开发又前进一个层次</li>
</ul>
<h1 id="单元测试的策略逻辑覆盖循环覆盖同行评审桌前检查代码走查代码评审静态数据流分析">单元测试的策略：逻辑覆盖、循环覆盖、同行评审、桌前检查、代码走查、代码评审、静态数据流分析。</h1>
<h1 id="按照规范的设计方法一个完整的数据库设计一般分为以下六个阶段">按照规范的设计方法，一个完整的数据库设计一般分为以下六个阶段</h1>
<p>⑴需求分析：分析用户的需求，包括数据、功能和性能需求；</p>
<p>⑵概念结构设计：主要采用E-R模型进行设计，包括画E-R图；</p>
<p>⑶逻辑结构设计：通过将E-R图转换成表，实现从E-R模型到关系模型的转换；</p>
<p>⑷数据库物理设计：主要是为所设计的数据库选择合适的存储结构和存取路径；</p>
<p>⑸数据库的实施：包括编程、测试和试运行；</p>
<p>⑹数据库运行与维护：系统的运行与数据库的日常维护。</p>
]]></content>
      <categories>
        <category>知识点</category>
      </categories>
      <tags>
        <tag>知识点</tag>
        <tag>牛客网</tag>
        <tag>刷题</tag>
        <tag>软件工程</tag>
      </tags>
  </entry>
  <entry>
    <title>ResNeSt: Split-Attention Networks</title>
    <url>/20200424l1/</url>
    <content><![CDATA[<h1 id="引言">引言</h1>
<h2 id="概述">概述</h2>
<p>本文主要介绍ResNet的变体：ResNeSt。</p>
<p>目前代码已经提供PyTorch和MXNet两个版本。</p>
<p>【GitHub】<a href="https://github.com/zhanghang1989/ResNeSt" target="_blank" rel="external nofollow noopener noreferrer" class="uri">https://github.com/zhanghang1989/ResNeSt</a></p>
<p>性能显著提升，参数量并没有显著增加。</p>
<p>借鉴了：Multi-path 和 Feature-map Attention思想。</p>
<p>其中：</p>
<ul>
<li>GoogleNet 采用了Multi-path机制，其中每个网络块均由不同的卷积kernels组成。</li>
<li>ResNeXt在ResNet bottle模块中采用组卷积，将multi-path结构转换为统一操作。</li>
<li>SE-Net 通过自适应地重新校准通道特征响应来引入通道注意力（channel-attention）机制。</li>
<li>SK-Net 通过两个网络分支引入特征图注意力（feature-map attention）。</li>
</ul>
<h2 id="主要贡献">主要贡献</h2>
<ul>
<li>在ResNet的基础上进行了修改，结合了feature-map split attention机制。</li>
<li>在图像分类和迁移学习上都有很大提升，可以作为这些领域的benchmark。</li>
</ul>
<h1 id="方法">方法</h1>
<h2 id="概述-1">概述</h2>
<p>ResNeSt主要引入了Split-Attention block，由feature-map group和split attention operation组成。</p>
<p>SE-Net、SK-Net、ResNeSt的结构图如下：</p>
<p><img src="/20200424l1/image-20200424121613880.png"></p>
<p>其中Split Attention的结构如下：</p>
<p><img src="/20200424l1/image-20200424121729777.png"></p>
<p>从图1和图2可知，都有split的影子。比如图1中的 <span class="math inline">\(K(k)\)</span> 和图2中的 <span class="math inline">\(R(r)\)</span> 都是超参数，也就是共计 <span class="math inline">\(G = K*R\)</span> 组。</p>
<h2 id="feature-map-group">Feature-map Group</h2>
<p>如图 2，仿照ResNeXt block，将特征分为多个组，特征组的数量由超参数K控制。</p>
<p>每一个组由分成多个cardinal组，数量由R控制。</p>
<p>因此所有组的数量为<span class="math inline">\(G=K\times R\)</span>。</p>
<p>每个小组应用一系列变化<span class="math inline">\(\{F_1, F2, ..., F_G\}\)</span>，每个组的中间表示使用<span class="math inline">\(U_i=F_i(X)\)</span>，其中<span class="math inline">\(i \in \{1,2,...,G\}\)</span>。</p>
<h2 id="split-attention-in-cardinal-groups">Split Attention in Cardinal Groups</h2>
<p>受SENet和SKNet启发，每一个cardinal组的表达通过像素级相加的方式融合起来，公式表示为<span class="math inline">\(\hat{U}^k=\sum_{j=R(k-1)+1}^{Rk}{U_j}\)</span>，其中<span class="math inline">\(\hat{U}^k \in R^{H \times H \times C/K}, k \in 1,2,...,K\)</span>。</p>
<p>通过空间维度的全局平均池化实现聚合通道维度的全局上下文信息，第c个组件具体公式如下： <span class="math display">\[
s_c^k=\frac{1}{H \times W}\sum_{i-1}^{H}\sum_{j=1}^{W}{\hat{U}_c^k(i,j)}
\]</span> cardinal组表示的加权融合使用通道维度soft注意力实现，其中每个channel的特征图使用加权组合产生。 <span class="math display">\[
V_{c}^{k}=\sum_{i=1}^{R} a_{i}^{k}(c) U_{R(k-1)+i}
\]</span></p>
<p><span class="math display">\[
a_{i}^{k}(c)=\left\{\begin{array}{ll}
\frac{\exp \left(\mathcal{G}_{i}^{c}\left(s^{k}\right)\right)}{\sum_{j=0}^{R} \exp \left(\mathcal{G}_{j}^{c}\left(s^{k}\right)\right)} &amp; \text { if } R&gt;1 \\
\frac{1}{1+\exp \left(-\mathcal{G}_{i}^{c}\left(s^{k}\right)\right)} &amp; \text { if } R=1
\end{array}\right.
\]</span></p>
<h2 id="resnest-block">ResNeSt Block</h2>
<p>最终结果通过short cut连接：<span class="math inline">\(Y = V+X\)</span></p>
<p>当特征图大小不匹配时加入相应的变换：<span class="math inline">\(Y=V+T(X)\)</span>，<span class="math inline">\(T\)</span>可以使用strided convolution或combined convolution-with-pooling。</p>
<h2 id="network-tweaks">Network Tweaks</h2>
<h3 id="average-downsampling">Average Downsampling</h3>
<p>对于某些要求空间信息的拓展任务来说保存空间信息使必要的。在此之前，ResNet通过带有stride的<span class="math inline">\(3 \times 3\)</span>来实现降采样，但是这样对于边界的处理需要采用padding操作。而在本文中直接使用<span class="math inline">\(3 \times 3\)</span>平均池化操作。</p>
<h3 id="tweaks-from-resnet-d">Tweaks from ResNet-D</h3>
<ol type="1">
<li>将原始的<span class="math inline">\(7 \times 7\)</span>卷积操作替换成3个<span class="math inline">\(3 \times 3\)</span>的卷积操作，他们具有相同的感受野，计算量也较为相似。</li>
<li>在shortcut中<span class="math inline">\(1 \times 1\)</span>卷积层前加入<span class="math inline">\(2 \times 2\)</span>平均池化。</li>
</ol>
<h2 id="训练策略">训练策略</h2>
<p>这个对大家目前的工作应该具有很大的参考价值（涨点tricks）。</p>
<ul>
<li>Large Mini-batch Distributed Training</li>
<li>Label Smoothing</li>
<li>Auto Augmentation</li>
<li>Mixup Training</li>
<li>Large Crop Size</li>
<li>Regularization</li>
</ul>
<h1 id="实验结果">实验结果</h1>
<h2 id="图像分类">图像分类</h2>
<p><img src="/20200424l1/image-20200424141553855.png"></p>
<p><img src="/20200424l1/image-20200424141606687.png"></p>
<h2 id="目标检测">目标检测</h2>
<p><img src="/20200424l1/image-20200424141715775.png"></p>
<h2 id="实例分割">实例分割</h2>
<p><img src="/20200424l1/image-20200424141737925.png"></p>
<h2 id="语义分割">语义分割</h2>
<p><img src="/20200424l1/image-20200424141754790.png"></p>
<h1 id="作者的次要结论">作者的次要结论</h1>
<ul>
<li>depth-wise convolution is not optimal for training and inference efficiency on GPU,</li>
<li>model accuracy get saturated on ImageNet with a fixed input image size,</li>
<li>increasing input image size can get better accuracy and FLOPS trade-off.</li>
<li>bicubic upsampling strategy is needed for large crop-size (≥ 320).</li>
</ul>
<h1 id="作者解答">作者解答</h1>
<h2 id="这里的attention和sknet挺像">这里的attention和sknet挺像</h2>
<p>问题来自<a href="https://www.zhihu.com/question/388637660" target="_blank" rel="external nofollow noopener noreferrer">知乎</a></p>
<blockquote>
<p>1). 我们相当于把 SKNet 的思想做到 ResNeXt 的 group 里更有效，而且相对于多分支的 SKNet 更模块化，易于优化。</p>
<p>2). 这篇 paper 其实并不是一个什么开创性的工作，感觉大家有点过高期待了，只是几个小伙伴在繁忙工作中抽出3个多星期的时间一起赶出来的，为了全面提高 gluoncv 项目里的所有模型的性能，最简单的方法就是提高 backbone。仅此而已。</p>
</blockquote>
<h1 id="参考文献">参考文献</h1>
<ol type="1">
<li><a href="https://zhuanlan.zhihu.com/p/132655457" target="_blank" rel="external nofollow noopener noreferrer">ResNet最强改进版来了！ResNeSt：Split-Attention Networks</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/133496926" target="_blank" rel="external nofollow noopener noreferrer">ResNeSt: Split-Attention Networks阅读笔记</a></li>
<li><a href="https://www.zhihu.com/question/388637660" target="_blank" rel="external nofollow noopener noreferrer">如何评价ResNeSt：Split-Attention Networks？</a></li>
</ol>
]]></content>
      <categories>
        <category>阅读笔记</category>
      </categories>
      <tags>
        <tag>2020</tag>
        <tag>github</tag>
        <tag>阅读笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>【牛客网】数据结构</title>
    <url>/20200423l1/</url>
    <content><![CDATA[<h1 id="在aoe网中从源点到汇点的所有路径中具有最大路径长度的路径称为关键路径并把关键路径上的活动称为关键活动">在AOE网中，从源点到汇点的所有路径中，具有最大路径长度的路径称为关键路径。并把关键路径上的活动称为关键活动。</h1>
<h1 id="某软件系统结构图如图所示该结构图的深度为3">某软件系统结构图如图所示，该结构图的深度为（3）。</h1>
<p>此处D的深度为2。</p>
<p><img src="/20200423l1/59_1494922952723_E02F610DE99BF6698EA1582A91C891C3.png"></p>
<h1 id="解决hash冲突的方法中拉链法的好处">解决hash冲突的方法中拉链法的好处</h1>
<p>与开放定址法相比，拉链法有如下几个优点： (1)拉链法处理冲突简单，且无堆积现象，即非同义词决不会发生冲突，因此平均查找长度较短； (2)由于拉链法中各链表上的结点空间是动态申请的，故它更适合于造表前无法确定表长的情况； (3)开放定址法为减少冲突，要求装填因子α较小，故当结点规模较大时会浪费很多空间。而拉链法中可取α≥1，且结点较大时，拉链法中增加的指针域可忽略不计，因此节省空间； (4)在用拉链法构造的散列表中，删除结点的操作易于实现。只要简单地删去链表上相应的结点即可。而对开放地址法构造的散列表，删除结点不能简单地将被删结点的空间置为空，否则将截断在它之后填人散列表的同义词结点的查找路径。这是因为各种开放地址法中，空地址单元(即开放地址)都是查找失败的条件。因此在用开放地址法处理冲突的散列表上执行删除操作，只能在被删结点上做删除标记，而不能真正删除结点。</p>
<h1 id="哈夫曼树只是一棵最优二叉树不一定是完全二叉树也不一定是平衡二叉树哈夫曼树不关注树的结构只关注带权路径长度">哈夫曼树只是一棵最优二叉树，不一定是完全二叉树，也不一定是平衡二叉树哈夫曼树不关注树的结构，只关注带权路径长度</h1>
]]></content>
      <categories>
        <category>知识点</category>
      </categories>
      <tags>
        <tag>知识点</tag>
        <tag>牛客网</tag>
        <tag>刷题</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>【牛客网】数据库</title>
    <url>/20200422l1/</url>
    <content><![CDATA[<h1 id="数据库管理系统是数据库系统的核心">数据库管理系统是数据库系统的核心</h1>
<p>数据库系统由数据库（数据）、数据库管理系统（软件）、数据库管理员（人员）、硬件平台（硬件）、软件平台5个部分构成。</p>
<p><strong>数据库管理系统</strong>是数据库系统的核心，负责数据库中的数据组织、数据操作、数据维护、控制及保护和数据服务等工作。</p>
<h1 id="数据库的外模式模式映像保证了数据与程序的逻辑独立性">数据库的外模式/模式映像，保证了数据与程序的逻辑独立性。</h1>
<p>外模式/模式映像定义了数据库中不同用户的外模式与数据库逻辑模式之间的对应关系。当数据库模式发生变化时，通过调整外模式/模式映像间的映像关系，使得应用程序不必随之修改，从而保证数据与应用程序间的逻辑独立性，简称数据的逻辑独立性。</p>
<p>模式又称逻辑模式，模式/内模式映像定义了数据库中数据全局逻辑结构与这些数据在系统中的物理存储组织结构之间的对应关系，保证数据库中数据与应用程序间的物理独立性。</p>
<h1 id="若事务-t-对数据对象-a-加上-s-锁则">若事务 T 对数据对象 A 加上 S 锁，则（ ）。</h1>
<p>事务T可以读A但不能修改A，其它事务只能再对A加S锁，而不能加X 锁。</p>
<p>S锁为共享锁，X锁为排他锁。</p>
<p>共享锁又称为读锁，若事务T对数据对象A加上S锁，则事务T只能读A；其他事务只能再对A加S锁，而不能加X锁，直到T释放A上的S锁。这就保证了其他事务可以读A，但在T释放A上的S锁之前不能对A做任何修改。</p>
<h1 id="关系的5条性质">关系的5条性质</h1>
<ol type="1">
<li>分量必须取原子值，每个分量必须是不可再分的数据项。</li>
<li>列是同质的，每列中的分量必须是同一类型的数据，来自同一个域。</li>
<li>属性不能重名。</li>
<li>行列的顺序无关。</li>
<li>任何两个元组不能完全相同，这是由主码约束来保证的。但是有些数据库若用户没有定义完整性约束条件，允许有两行以上的相同的元组。</li>
</ol>
<h1 id="在关系模式-r分解成数据库模式ρ时谈论无损联接的先决条件是存在泛关系">在关系模式 R分解成数据库模式ρ时，谈论无损联接的先决条件是存在（泛关系）。</h1>
<h1 id="后援副本的用途是故障后的恢复">后援副本的用途是故障后的恢复</h1>
<h1 id="数据库恢复的基础是利用转储的冗余数据这些转储的冗余数据是指">数据库恢复的基础是利用转储的冗余数据。这些转储的冗余数据是指（ ）</h1>
<p>日志文件、数据库后备副本</p>
<p>数据库恢复的实现中可定期对整个数据库进行复制或转储 转储是数据库恢复中常用的基本技术，它是指DBA把数据库复制到另一个磁盘上的过程，可分为静态转储和动态转储 转储还可以分为海量存储和增量转储。 转储的冗余数据包通常包括 日志文件、数据库后备副本 等。</p>
<h1 id="索引的优缺点">索引的优缺点：</h1>
<h2 id="优点">优点：</h2>
<p>（1）通过创建索引,可以在查询的过程中,提高系统的性能 （2）通过创建唯一性索引,可以保证数据库表中每一行数据的唯一性 （3）在使用分组和排序子句进行数据检索时,可以减少查询中分组和排序的时间</p>
<h2 id="缺点">缺点</h2>
<p>（1）创建索引和维护索引要耗费时间,而且时间随着数据量的增加而增大 （2）索引需要占用物理空间,如果要建立聚簇索引,所需要的空间会更大 （3）在对表中的数据进行增加删除和修改时需要耗费较多的时间,因为索引也要动态地维护</p>
<h1 id="外模式-内模式-概念模式的关系">外模式 内模式 概念模式的关系</h1>
<p>三级模式结构：外模式、模式和内模式</p>
<p>一、模式（Schema）</p>
<p>定义：也称逻辑模式，是数据库中全体数据的逻辑结构和特征的描述，是所有用户的公共数据视图。</p>
<p>理解： ① 一个数据库只有一个模式； ② 是数据库数据在逻辑级上的视图； ③ 数据库模式以某一种数据模型为基础； ④ 定义模式时不仅要定义数据的逻辑结构（如数据记录由哪些数据项构成，数据项的名字、类型、取值范围等），而且要定义与数据有关的安全性、完整性要求，定义这些数据之间的联系。</p>
<p>二、外模式（External Schema）</p>
<p>定义：也称子模式（Subschema）或用户模式，是数据库用户（包括应用程序员和最终用户）能够看见和使用的局部数据的逻辑结构和特征的描述，是数据库用户的数据视图，是与某一应用有关的数据的逻辑表示。</p>
<p>理解： ① 一个数据库可以有多个外模式； ② 外模式就是用户视图； ③ 外模式是保证数据安全性的一个有力措施。</p>
<p>三、内模式（Internal Schema）</p>
<p>定义：也称存储模式（Storage Schema），它是数据物理结构和存储方式的描述，是数据在数据库内部的表示方式（例如，记录的存储方式是顺序存储、按照B树结构存储还是按hash方法存储；索引按照什么方式组织；数据是否压缩存储，是否加密；数据的存储记录结构有何规定）。</p>
<p>理解： ① 一个数据库只有一个内模式； ② 一个表可能由多个文件组成，如：数据文件、索引文件。 它是数据库管理系统(DBMS)对数据库中数据进行有效组织和管理的方法</p>
<p>其目的有： ① 为了减少数据冗余，实现数据共享； ② 为了提高存取效率，改善性能。</p>
<h1 id="事务的特性-acid特性">事务的特性 ACID特性</h1>
<p>A: 原子 C: 一致 I:隔离 D:持久</p>
<h1 id="复合索引可以只使用复合索引中的一部分但必须是由最左部分开始且可以存在常量">复合索引可以只使用复合索引中的一部分，但必须是由最左部分开始，且可以存在常量。</h1>
<h1 id="需求分析概念设计逻辑设计物理设计">需求分析、概念设计、逻辑设计、物理设计</h1>
<ul>
<li>需求分析：分析用户的需求，包括数据、功能和性能需求，确立系统所需要实现的功能模块</li>
<li>概念设计：主要采用E-R模型进行设计，包括画E-R图</li>
<li>逻辑设计：E-R图转换成关系模式，进行关系规范化</li>
<li>物理设计：为所设计的数据库选择合适的 存储结构 和存取路径</li>
</ul>
<h1 id="sql语言-四大类dql数据查询语言dml数据操纵语言dcl数据控制语言ddl数据定义语言">SQL语言 四大类：DQL（数据查询语言）、DML（数据操纵语言）、DCL（数据控制语言）、DDL（数据定义语言）</h1>
<p>DQL：数据查询语言DQL基本结构是由SELECT子句，FROM子句，WHERE子句组成的查询块</p>
<p>DML：插入、更新、删除</p>
<p>DCL：数据控制语言DCL用来授予或回收访问数据库的某种特权，并控制数据库操纵事务发生的时间及效果，对数据库实行监视等</p>
<p>DDL：数据定义语言DDL用来创建数据库中的各种对象-----表、视图、索引、同义词、聚簇等</p>
<h1 id="i中的数据保护模式包括有">9i中的数据保护模式包括有？</h1>
<p><strong>数据库Oracle 9i</strong> ：</p>
<h2 id="最大保护maximum-protection">最大保护(Maximum protection )</h2>
<p>这种模式能够保证在primary Database发生故障保证数据不丢失。在这种模式下，事务提交前，要保证Redo数据已经写入到Primary Database的Online Redologs，同时写入Standby Database的Standby Redologs，并确保至少在一个Standby Database中可用。如果Standby Database不可用，Primary Database将会shutdown。</p>
<h2 id="最高可用性maximum-availability">最高可用性(Maximum availability)</h2>
<p>这种模式在不影响Primary Database可用的前提下，提供最高级别的数据保护策略，这种模式也能够确保数据不丢失。事务提交之前，要保证Redo数据已经写入到Primary Database的Online Redologs，同时写入Standby Database的Standby Redologs，确保至少在一个Standby Database中可用。与最大保护模式不同的是，如果Standby Database出现故障导致不可用，Primary Database并不会被shutdown，而是自动转换为最高性能模式，等Standby Database恢复正常后，Primary Database又会自动切换到最高可用性模式。</p>
<h2 id="最大性能maximum-performance">最大性能(Maximum performance)</h2>
<p>这是一种默认的保护模式。事务可以随时提交，当前Primary Database的Redo数据至少需要写入一个Standby Database，不过这种方式不会等待Standby Database是否写入的确认因此这种写入属于异步写入。</p>
<h1 id="数据库文件缓冲区日志文件后援文件">数据库文件、缓冲区、日志文件、后援文件</h1>
<p>数据库文件：电脑上储存数据的文件。</p>
<p>缓冲区：是用户前端用来存储、操纵数据的对象。</p>
<p>日志文件：用于记录系统操作事件的记录文件或文件集合，可分为事件日志和消息日志。具有处理历史数据、诊断问题的追踪以及理解系统的活动等重要作用。</p>
<p>后援副本：数据的转存，这样才能让数据库恢复到最近一次转存时的一致性状态。</p>
<h1 id="数据库系统的存储模式如有改变概念模式无需改动">数据库系统的存储模式如有改变，概念模式无需改动</h1>
<h1 id="视图设计的设计次序">视图设计的设计次序</h1>
<ol type="1">
<li>自顶向下。先全局框架，然后逐步细化</li>
<li><p>自底向上。先局部概念结构，再集成为全局结构</p></li>
<li><p>由里向外。先核心结构，再向外扩张</p></li>
<li><p>混合策略。1与2相结合，先自顶向下设计一个概念结构的框架，再自底向上为框架设计局部概念结构</p></li>
</ol>
<h1 id="范式">范式</h1>
<p>1NF</p>
<p>每个关系r的属性值为不可分的原子值</p>
<p>2NF</p>
<p>满足1NF，非主属性完全函数依赖于候选键(左部不可约)</p>
<p>3NF</p>
<p>满足2NF，消除非主属性对候选键的传递依赖</p>
<p>BCNF</p>
<p>满足3NF，消除每一属性对候选键的传递依赖</p>
<p>1NF + 消去非主属性对键的部分函数依赖 = 2NF。即2NF中，非主属性完全依赖于主关键字；</p>
<p>2NF + 消去非主属性对键的传递函数依赖 = 3NF。即3NF中，属性不依赖于其它非主属性。传递函数依赖，指的是如果存在&quot;A → B → C&quot;的决定关系，则C传递函数依赖于A；</p>
<p>3NF + 消去主属性对键的传递函数依赖 = BCNF。BCNF是3NF的改进形式，即在3NF的基础上，数据库表中如果不存在任何字段对任一候选关键字段的传递函数依赖则符合BCNF。</p>
<h1 id="存储过程的调用">存储过程的调用</h1>
<p>exec 是sql server的存储过程调用方式，call是mysql的存储过程调用方式，同时调用时必须有参数或者为null</p>
<p>MySQL的存储过程参数没有默认值，所以在调用MySQL存储过程时，不能省略参数，但是可以用null来代替</p>
<h1 id="nosql数据库">noSQL数据库</h1>
<p>基于K-V：Redis， Voldemort， Oracle BDB</p>
<p>基于列存储：Cassandra， HBase， Riak</p>
<p>基于文档型：CouchDB， MongoDB</p>
<p>图形（Graph）数据库：Neo4J， InfoGrid， Infinite Graph</p>
<h1 id="数据模型与逻辑模型">数据模型与逻辑模型</h1>
<p>常用的数据模型：概念模型、逻辑模型、物理模型</p>
<p>常用的逻辑模型：层次模型、网状模型、关系模型</p>
<h1 id="查询设计视图窗口分为上下部分">“查询”设计视图窗口分为上下部分</h1>
<p>上部分：“字段列表区”，用来显示所选择的所有字段。</p>
<p>下部分：“设计网络”，由一些字段列和一些已命名的列组成。</p>
]]></content>
      <categories>
        <category>知识点</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>知识点</tag>
        <tag>牛客网</tag>
        <tag>刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>白盒测试：语句覆盖、条件覆盖（分支覆盖）、判定覆盖、条件-判定覆盖、组合覆盖、路径覆盖的区别</title>
    <url>/20200421l1/</url>
    <content><![CDATA[<h1 id="语句覆盖">语句覆盖</h1>
<p><strong>每个可执行语句都走一遍即可，即测试用例要覆盖所有的语句</strong>（来源：软件开发的技术基础） <a id="more"></a></p>
<figure>
<img src="/20200421l1/5de1f30e76c66137ee061916.jpg" alt="img"><figcaption>img</figcaption>
</figure>
<h1 id="判定覆盖分支覆盖">判定覆盖（分支覆盖）</h1>
<p>针对判断语句，在设定案例的时候，要设定True和False的两种案例；与语句覆盖不同的是增加了False的情况。</p>
<figure>
<img src="/20200421l1/5de1f30e76c66137ee061916-1587460107267.jpg" alt="img"><figcaption>img</figcaption>
</figure>
<h1 id="条件覆盖">条件覆盖</h1>
<p>针对判断语句里面案例的取值都要去一次，不考虑条件的取值</p>
<p><strong>另注</strong>：条件覆盖保证判断中的每个条件都被覆盖（来源：软件开发的技术基础）</p>
<figure>
<img src="/20200421l1/5de1f30e76c66137ee061916-1587460180539.jpg" alt="img"><figcaption>img</figcaption>
</figure>
<h1 id="判定条件覆盖">判定/条件覆盖</h1>
<p>判定覆盖各条件覆盖交叉，针对于判定中的条件取值</p>
<figure>
<img src="/20200421l1/5de1f30e76c66137ee061916-1587460218160.jpg" alt="img"><figcaption>img</figcaption>
</figure>
<h1 id="条件组合覆盖">条件组合覆盖</h1>
<p>判定-条件覆盖的加强版</p>
<figure>
<img src="/20200421l1/5de1f30e76c66137ee061916-1587460241521.jpg" alt="img"><figcaption>img</figcaption>
</figure>
<h1 id="路径覆盖">路径覆盖</h1>
<figure>
<img src="/20200421l1/5de1f30e76c66137ee061916-1587460268368.jpg" alt="img"><figcaption>img</figcaption>
</figure>
]]></content>
      <categories>
        <category>知识点</category>
      </categories>
      <tags>
        <tag>软件测试</tag>
        <tag>白盒测试</tag>
      </tags>
  </entry>
</search>
